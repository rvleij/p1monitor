{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","enableAuto","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","setUploadHeaders","extraHeaders","toSend","promises","endpointHandler"],"mappings":"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","file":"fine-uploader.core.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\r\n/* jshint -W079 */\r\nvar qq = function(element) {\r\n    \"use strict\";\r\n\r\n    return {\r\n        hide: function() {\r\n            element.style.display = \"none\";\r\n            return this;\r\n        },\r\n\r\n        /** Returns the function which detaches attached event */\r\n        attach: function(type, fn) {\r\n            if (element.addEventListener) {\r\n                element.addEventListener(type, fn, false);\r\n            } else if (element.attachEvent) {\r\n                element.attachEvent(\"on\" + type, fn);\r\n            }\r\n            return function() {\r\n                qq(element).detach(type, fn);\r\n            };\r\n        },\r\n\r\n        detach: function(type, fn) {\r\n            if (element.removeEventListener) {\r\n                element.removeEventListener(type, fn, false);\r\n            } else if (element.attachEvent) {\r\n                element.detachEvent(\"on\" + type, fn);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        contains: function(descendant) {\r\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\r\n            // says a `null` (or ostensibly `undefined`) parameter\r\n            // passed into `Node.contains` should result in a false return value.\r\n            // IE7 throws an exception if the parameter is `undefined` though.\r\n            if (!descendant) {\r\n                return false;\r\n            }\r\n\r\n            // compareposition returns false in this case\r\n            if (element === descendant) {\r\n                return true;\r\n            }\r\n\r\n            if (element.contains) {\r\n                return element.contains(descendant);\r\n            } else {\r\n                /*jslint bitwise: true*/\r\n                return !!(descendant.compareDocumentPosition(element) & 8);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Insert this element before elementB.\r\n         */\r\n        insertBefore: function(elementB) {\r\n            elementB.parentNode.insertBefore(element, elementB);\r\n            return this;\r\n        },\r\n\r\n        remove: function() {\r\n            element.parentNode.removeChild(element);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sets styles for an element.\r\n         * Fixes opacity in IE6-8.\r\n         */\r\n        css: function(styles) {\r\n            /*jshint eqnull: true*/\r\n            if (element.style == null) {\r\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\r\n            }\r\n\r\n            /*jshint -W116*/\r\n            if (styles.opacity != null) {\r\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\r\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\r\n                }\r\n            }\r\n            qq.extend(element.style, styles);\r\n\r\n            return this;\r\n        },\r\n\r\n        hasClass: function(name, considerParent) {\r\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\r\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\r\n        },\r\n\r\n        addClass: function(name) {\r\n            if (!qq(element).hasClass(name)) {\r\n                element.className += \" \" + name;\r\n            }\r\n            return this;\r\n        },\r\n\r\n        removeClass: function(name) {\r\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\r\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\r\n            return this;\r\n        },\r\n\r\n        getByClass: function(className, first) {\r\n            var candidates,\r\n                result = [];\r\n\r\n            if (first && element.querySelector) {\r\n                return element.querySelector(\".\" + className);\r\n            }\r\n            else if (element.querySelectorAll) {\r\n                return element.querySelectorAll(\".\" + className);\r\n            }\r\n\r\n            candidates = element.getElementsByTagName(\"*\");\r\n\r\n            qq.each(candidates, function(idx, val) {\r\n                if (qq(val).hasClass(className)) {\r\n                    result.push(val);\r\n                }\r\n            });\r\n            return first ? result[0] : result;\r\n        },\r\n\r\n        getFirstByClass: function(className) {\r\n            return qq(element).getByClass(className, true);\r\n        },\r\n\r\n        children: function() {\r\n            var children = [],\r\n                child = element.firstChild;\r\n\r\n            while (child) {\r\n                if (child.nodeType === 1) {\r\n                    children.push(child);\r\n                }\r\n                child = child.nextSibling;\r\n            }\r\n\r\n            return children;\r\n        },\r\n\r\n        setText: function(text) {\r\n            element.innerText = text;\r\n            element.textContent = text;\r\n            return this;\r\n        },\r\n\r\n        clearText: function() {\r\n            return qq(element).setText(\"\");\r\n        },\r\n\r\n        // Returns true if the attribute exists on the element\r\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\r\n        hasAttribute: function(attrName) {\r\n            var attrVal;\r\n\r\n            if (element.hasAttribute) {\r\n\r\n                if (!element.hasAttribute(attrName)) {\r\n                    return false;\r\n                }\r\n\r\n                /*jshint -W116*/\r\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\r\n            }\r\n            else {\r\n                attrVal = element[attrName];\r\n\r\n                if (attrVal === undefined) {\r\n                    return false;\r\n                }\r\n\r\n                /*jshint -W116*/\r\n                return (/^false$/i).exec(attrVal) == null;\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.canvasToBlob = function(canvas, mime, quality) {\r\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\r\n    };\r\n\r\n    qq.dataUriToBlob = function(dataUri) {\r\n        var arrayBuffer, byteString,\r\n            createBlob = function(data, mime) {\r\n                var BlobBuilder = window.BlobBuilder ||\r\n                        window.WebKitBlobBuilder ||\r\n                        window.MozBlobBuilder ||\r\n                        window.MSBlobBuilder,\r\n                    blobBuilder = BlobBuilder && new BlobBuilder();\r\n\r\n                if (blobBuilder) {\r\n                    blobBuilder.append(data);\r\n                    return blobBuilder.getBlob(mime);\r\n                }\r\n                else {\r\n                    return new Blob([data], {type: mime});\r\n                }\r\n            },\r\n            intArray, mimeString;\r\n\r\n        // convert base64 to raw binary data held in a string\r\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\r\n            byteString = atob(dataUri.split(\",\")[1]);\r\n        }\r\n        else {\r\n            byteString = decodeURI(dataUri.split(\",\")[1]);\r\n        }\r\n\r\n        // extract the MIME\r\n        mimeString = dataUri.split(\",\")[0]\r\n            .split(\":\")[1]\r\n            .split(\";\")[0];\r\n\r\n        // write the bytes of the binary string to an ArrayBuffer\r\n        arrayBuffer = new ArrayBuffer(byteString.length);\r\n        intArray = new Uint8Array(arrayBuffer);\r\n        qq.each(byteString, function(idx, character) {\r\n            intArray[idx] = character.charCodeAt(0);\r\n        });\r\n\r\n        return createBlob(arrayBuffer, mimeString);\r\n    };\r\n\r\n    qq.log = function(message, level) {\r\n        if (window.console) {\r\n            if (!level || level === \"info\") {\r\n                window.console.log(message);\r\n            }\r\n            else\r\n            {\r\n                if (window.console[level]) {\r\n                    window.console[level](message);\r\n                }\r\n                else {\r\n                    window.console.log(\"<\" + level + \"> \" + message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.isObject = function(variable) {\r\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\r\n    };\r\n\r\n    qq.isFunction = function(variable) {\r\n        return typeof (variable) === \"function\";\r\n    };\r\n\r\n    /**\r\n     * Check the type of a value.  Is it an \"array\"?\r\n     *\r\n     * @param value value to test.\r\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\r\n     */\r\n    qq.isArray = function(value) {\r\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\r\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\r\n    };\r\n\r\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\r\n    qq.isItemList = function(maybeItemList) {\r\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\r\n    };\r\n\r\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\r\n    // object that is associated with collections of Nodes.\r\n    qq.isNodeList = function(maybeNodeList) {\r\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\r\n            // If `HTMLCollection` is the actual type of the object, we must determine this\r\n            // by checking for expected properties/methods on the object\r\n            (maybeNodeList.item && maybeNodeList.namedItem);\r\n    };\r\n\r\n    qq.isString = function(maybeString) {\r\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\r\n    };\r\n\r\n    qq.trimStr = function(string) {\r\n        if (String.prototype.trim) {\r\n            return string.trim();\r\n        }\r\n\r\n        return string.replace(/^\\s+|\\s+$/g, \"\");\r\n    };\r\n\r\n    /**\r\n     * @param str String to format.\r\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\r\n     */\r\n    qq.format = function(str) {\r\n\r\n        var args =  Array.prototype.slice.call(arguments, 1),\r\n            newStr = str,\r\n            nextIdxToReplace = newStr.indexOf(\"{}\");\r\n\r\n        qq.each(args, function(idx, val) {\r\n            var strBefore = newStr.substring(0, nextIdxToReplace),\r\n                strAfter = newStr.substring(nextIdxToReplace + 2);\r\n\r\n            newStr = strBefore + val + strAfter;\r\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\r\n\r\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\r\n            if (nextIdxToReplace < 0) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return newStr;\r\n    };\r\n\r\n    qq.isFile = function(maybeFile) {\r\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\r\n    };\r\n\r\n    qq.isFileList = function(maybeFileList) {\r\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\r\n    };\r\n\r\n    qq.isFileOrInput = function(maybeFileOrInput) {\r\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\r\n    };\r\n\r\n    qq.isInput = function(maybeInput, notFile) {\r\n        var evaluateType = function(type) {\r\n            var normalizedType = type.toLowerCase();\r\n\r\n            if (notFile) {\r\n                return normalizedType !== \"file\";\r\n            }\r\n\r\n            return normalizedType === \"file\";\r\n        };\r\n\r\n        if (window.HTMLInputElement) {\r\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\r\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        if (maybeInput.tagName) {\r\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\r\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    qq.isBlob = function(maybeBlob) {\r\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    qq.isXhrUploadSupported = function() {\r\n        var input = document.createElement(\"input\");\r\n        input.type = \"file\";\r\n\r\n        return (\r\n            input.multiple !== undefined &&\r\n                typeof File !== \"undefined\" &&\r\n                typeof FormData !== \"undefined\" &&\r\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\r\n    };\r\n\r\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\r\n    qq.createXhrInstance = function() {\r\n        if (window.XMLHttpRequest) {\r\n            return new XMLHttpRequest();\r\n        }\r\n\r\n        try {\r\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\r\n        }\r\n        catch (error) {\r\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\r\n            return null;\r\n        }\r\n    };\r\n\r\n    qq.isFolderDropSupported = function(dataTransfer) {\r\n        return dataTransfer.items &&\r\n            dataTransfer.items.length > 0 &&\r\n            dataTransfer.items[0].webkitGetAsEntry;\r\n    };\r\n\r\n    qq.isFileChunkingSupported = function() {\r\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\r\n            qq.isXhrUploadSupported() &&\r\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\r\n    };\r\n\r\n    qq.sliceBlob = function(fileOrBlob, start, end) {\r\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\r\n\r\n        return slicer.call(fileOrBlob, start, end);\r\n    };\r\n\r\n    qq.arrayBufferToHex = function(buffer) {\r\n        var bytesAsHex = \"\",\r\n            bytes = new Uint8Array(buffer);\r\n\r\n        qq.each(bytes, function(idx, byt) {\r\n            var byteAsHexStr = byt.toString(16);\r\n\r\n            if (byteAsHexStr.length < 2) {\r\n                byteAsHexStr = \"0\" + byteAsHexStr;\r\n            }\r\n\r\n            bytesAsHex += byteAsHexStr;\r\n        });\r\n\r\n        return bytesAsHex;\r\n    };\r\n\r\n    qq.readBlobToHex = function(blob, startOffset, length) {\r\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\r\n            fileReader = new FileReader(),\r\n            promise = new qq.Promise();\r\n\r\n        fileReader.onload = function() {\r\n            promise.success(qq.arrayBufferToHex(fileReader.result));\r\n        };\r\n\r\n        fileReader.onerror = promise.failure;\r\n\r\n        fileReader.readAsArrayBuffer(initialBlob);\r\n\r\n        return promise;\r\n    };\r\n\r\n    qq.extend = function(first, second, extendNested) {\r\n        qq.each(second, function(prop, val) {\r\n            if (extendNested && qq.isObject(val)) {\r\n                if (first[prop] === undefined) {\r\n                    first[prop] = {};\r\n                }\r\n                qq.extend(first[prop], val, true);\r\n            }\r\n            else {\r\n                first[prop] = val;\r\n            }\r\n        });\r\n\r\n        return first;\r\n    };\r\n\r\n    /**\r\n     * Allow properties in one object to override properties in another,\r\n     * keeping track of the original values from the target object.\r\n     *\r\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\r\n     *\r\n     * @param target Update properties in this object from some source\r\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\r\n     * @returns {object} The target object\r\n     */\r\n    qq.override = function(target, sourceFn) {\r\n        var super_ = {},\r\n            source = sourceFn(super_);\r\n\r\n        qq.each(source, function(srcPropName, srcPropVal) {\r\n            if (target[srcPropName] !== undefined) {\r\n                super_[srcPropName] = target[srcPropName];\r\n            }\r\n\r\n            target[srcPropName] = srcPropVal;\r\n        });\r\n\r\n        return target;\r\n    };\r\n\r\n    /**\r\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\r\n     */\r\n    qq.indexOf = function(arr, elt, from) {\r\n        if (arr.indexOf) {\r\n            return arr.indexOf(elt, from);\r\n        }\r\n\r\n        from = from || 0;\r\n        var len = arr.length;\r\n\r\n        if (from < 0) {\r\n            from += len;\r\n        }\r\n\r\n        for (; from < len; from += 1) {\r\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\r\n                return from;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    //this is a version 4 UUID\r\n    qq.getUniqueId = function() {\r\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n            /*jslint eqeq: true, bitwise: true*/\r\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n\r\n    //\r\n    // Browsers and platforms detection\r\n    qq.ie = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\r\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\r\n    };\r\n\r\n    qq.ie7 = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\r\n    };\r\n\r\n    qq.ie8 = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\r\n    };\r\n\r\n    qq.ie10 = function() {\r\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\r\n    };\r\n\r\n    qq.ie11 = function() {\r\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\r\n    };\r\n\r\n    qq.edge = function() {\r\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\r\n    };\r\n\r\n    qq.safari = function() {\r\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\r\n    };\r\n\r\n    qq.chrome = function() {\r\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\r\n    };\r\n\r\n    qq.opera = function() {\r\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\r\n    };\r\n\r\n    qq.firefox = function() {\r\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\r\n    };\r\n\r\n    qq.windows = function() {\r\n        return navigator.platform === \"Win32\";\r\n    };\r\n\r\n    qq.android = function() {\r\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\r\n    };\r\n\r\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\r\n    // such as the one that prevents a `Blob` from being uploaded.\r\n    qq.androidStock = function() {\r\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\r\n    };\r\n\r\n    qq.ios6 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\r\n    };\r\n\r\n    qq.ios7 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\r\n    };\r\n\r\n    qq.ios8 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\r\n    };\r\n\r\n    // iOS 8.0.0\r\n    qq.ios800 = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\r\n    };\r\n\r\n    qq.ios = function() {\r\n        /*jshint -W014 */\r\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\r\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\r\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\r\n    };\r\n\r\n    qq.iosChrome = function() {\r\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\r\n    };\r\n\r\n    qq.iosSafari = function() {\r\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\r\n    };\r\n\r\n    qq.iosSafariWebView = function() {\r\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\r\n    };\r\n\r\n    //\r\n    // Events\r\n\r\n    qq.preventDefault = function(e) {\r\n        if (e.preventDefault) {\r\n            e.preventDefault();\r\n        } else {\r\n            e.returnValue = false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates and returns element from html string\r\n     * Uses innerHTML to create an element\r\n     */\r\n    qq.toElement = (function() {\r\n        var div = document.createElement(\"div\");\r\n        return function(html) {\r\n            div.innerHTML = html;\r\n            var element = div.firstChild;\r\n            div.removeChild(element);\r\n            return element;\r\n        };\r\n    }());\r\n\r\n    //key and value are passed to callback for each entry in the iterable item\r\n    qq.each = function(iterableItem, callback) {\r\n        var keyOrIndex, retVal;\r\n\r\n        if (iterableItem) {\r\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\r\n            if (window.Storage && iterableItem.constructor === window.Storage) {\r\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\r\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\r\n                    if (retVal === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\r\n            // when iterating over items inside the object.\r\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\r\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\r\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\r\n                    if (retVal === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (qq.isString(iterableItem)) {\r\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\r\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\r\n                    if (retVal === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (keyOrIndex in iterableItem) {\r\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\r\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\r\n                        if (retVal === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //include any args that should be passed to the new function after the context arg\r\n    qq.bind = function(oldFunc, context) {\r\n        if (qq.isFunction(oldFunc)) {\r\n            var args =  Array.prototype.slice.call(arguments, 2);\r\n\r\n            return function() {\r\n                var newArgs = qq.extend([], args);\r\n                if (arguments.length) {\r\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\r\n                }\r\n                return oldFunc.apply(context, newArgs);\r\n            };\r\n        }\r\n\r\n        throw new Error(\"first parameter must be a function!\");\r\n    };\r\n\r\n    /**\r\n     * obj2url() takes a json-object as argument and generates\r\n     * a querystring. pretty much like jQuery.param()\r\n     *\r\n     * how to use:\r\n     *\r\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\r\n     *\r\n     * will result in:\r\n     *\r\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\r\n     *\r\n     * @param  Object JSON-Object\r\n     * @param  String current querystring-part\r\n     * @return String encoded querystring\r\n     */\r\n    qq.obj2url = function(obj, temp, prefixDone) {\r\n        /*jshint laxbreak: true*/\r\n        var uristrings = [],\r\n            prefix = \"&\",\r\n            add = function(nextObj, i) {\r\n                var nextTemp = temp\r\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\r\n                    ? temp\r\n                    : temp + \"[\" + i + \"]\"\r\n                    : i;\r\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\r\n                    uristrings.push(\r\n                        (typeof nextObj === \"object\")\r\n                            ? qq.obj2url(nextObj, nextTemp, true)\r\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\r\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\r\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\r\n                    );\r\n                }\r\n            };\r\n\r\n        if (!prefixDone && temp) {\r\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\r\n            uristrings.push(temp);\r\n            uristrings.push(qq.obj2url(obj));\r\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\r\n            qq.each(obj, function(idx, val) {\r\n                add(val, idx);\r\n            });\r\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\r\n            qq.each(obj, function(prop, val) {\r\n                add(val, prop);\r\n            });\r\n        } else {\r\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\r\n        }\r\n\r\n        if (temp) {\r\n            return uristrings.join(prefix);\r\n        } else {\r\n            return uristrings.join(prefix)\r\n                .replace(/^&/, \"\")\r\n                .replace(/%20/g, \"+\");\r\n        }\r\n    };\r\n\r\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\r\n        if (!formData) {\r\n            formData = new FormData();\r\n        }\r\n\r\n        qq.each(obj, function(key, val) {\r\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\r\n\r\n            if (qq.isObject(val)) {\r\n                qq.obj2FormData(val, formData, key);\r\n            }\r\n            else if (qq.isFunction(val)) {\r\n                formData.append(key, val());\r\n            }\r\n            else {\r\n                formData.append(key, val);\r\n            }\r\n        });\r\n\r\n        return formData;\r\n    };\r\n\r\n    qq.obj2Inputs = function(obj, form) {\r\n        var input;\r\n\r\n        if (!form) {\r\n            form = document.createElement(\"form\");\r\n        }\r\n\r\n        qq.obj2FormData(obj, {\r\n            append: function(key, val) {\r\n                input = document.createElement(\"input\");\r\n                input.setAttribute(\"name\", key);\r\n                input.setAttribute(\"value\", val);\r\n                form.appendChild(input);\r\n            }\r\n        });\r\n\r\n        return form;\r\n    };\r\n\r\n    /**\r\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\r\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\r\n     */\r\n    qq.parseJson = function(json) {\r\n        /*jshint evil: true*/\r\n        if (window.JSON && qq.isFunction(JSON.parse)) {\r\n            return JSON.parse(json);\r\n        } else {\r\n            return eval(\"(\" + json + \")\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Retrieve the extension of a file, if it exists.\r\n     *\r\n     * @param filename\r\n     * @returns {string || undefined}\r\n     */\r\n    qq.getExtension = function(filename) {\r\n        var extIdx = filename.lastIndexOf(\".\") + 1;\r\n\r\n        if (extIdx > 0) {\r\n            return filename.substr(extIdx, filename.length - extIdx);\r\n        }\r\n    };\r\n\r\n    qq.getFilename = function(blobOrFileInput) {\r\n        /*jslint regexp: true*/\r\n\r\n        if (qq.isInput(blobOrFileInput)) {\r\n            // get input value and remove path to normalize\r\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\r\n        }\r\n        else if (qq.isFile(blobOrFileInput)) {\r\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\r\n                return blobOrFileInput.fileName;\r\n            }\r\n        }\r\n\r\n        return blobOrFileInput.name;\r\n    };\r\n\r\n    /**\r\n     * A generic module which supports object disposing in dispose() method.\r\n     * */\r\n    qq.DisposeSupport = function() {\r\n        var disposers = [];\r\n\r\n        return {\r\n            /** Run all registered disposers */\r\n            dispose: function() {\r\n                var disposer;\r\n                do {\r\n                    disposer = disposers.shift();\r\n                    if (disposer) {\r\n                        disposer();\r\n                    }\r\n                }\r\n                while (disposer);\r\n            },\r\n\r\n            /** Attach event handler and register de-attacher as a disposer */\r\n            attach: function() {\r\n                var args = arguments;\r\n                /*jslint undef:true*/\r\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\r\n            },\r\n\r\n            /** Add disposer to the collection */\r\n            addDisposer: function(disposeFunction) {\r\n                disposers.push(disposeFunction);\r\n            }\r\n        };\r\n    };\r\n}());\r\n","/* globals define, module, global, qq */\r\n(function() {\r\n    \"use strict\";\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(function() {\r\n            return qq;\r\n        });\r\n    }\r\n    else if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = qq;\r\n    }\r\n    else {\r\n        global.qq = qq;\r\n    }\r\n}());\r\n","/* globals qq */\r\n/**\r\n * Fine Uploader top-level Error container.  Inherits from `Error`.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.Error = function(message) {\r\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\r\n    };\r\n\r\n    qq.Error.prototype = new Error();\r\n}());\r\n","/*global qq */\r\nqq.version = \"5.15.0\";\r\n","/* globals qq */\r\nqq.supportedFeatures = (function() {\r\n    \"use strict\";\r\n\r\n    var supportsUploading,\r\n        supportsUploadingBlobs,\r\n        supportsFileDrop,\r\n        supportsAjaxFileUploading,\r\n        supportsFolderDrop,\r\n        supportsChunking,\r\n        supportsResume,\r\n        supportsUploadViaPaste,\r\n        supportsUploadCors,\r\n        supportsDeleteFileXdr,\r\n        supportsDeleteFileCorsXhr,\r\n        supportsDeleteFileCors,\r\n        supportsFolderSelection,\r\n        supportsImagePreviews,\r\n        supportsUploadProgress;\r\n\r\n    function testSupportsFileInputElement() {\r\n        var supported = true,\r\n            tempInput;\r\n\r\n        try {\r\n            tempInput = document.createElement(\"input\");\r\n            tempInput.type = \"file\";\r\n            qq(tempInput).hide();\r\n\r\n            if (tempInput.disabled) {\r\n                supported = false;\r\n            }\r\n        }\r\n        catch (ex) {\r\n            supported = false;\r\n        }\r\n\r\n        return supported;\r\n    }\r\n\r\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\r\n    function isChrome21OrHigher() {\r\n        return (qq.chrome() || qq.opera()) &&\r\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\r\n    }\r\n\r\n    //only way to test for complete Clipboard API support at this time\r\n    function isChrome14OrHigher() {\r\n        return (qq.chrome() || qq.opera()) &&\r\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\r\n    }\r\n\r\n    //Ensure we can send cross-origin `XMLHttpRequest`s\r\n    function isCrossOriginXhrSupported() {\r\n        if (window.XMLHttpRequest) {\r\n            var xhr = qq.createXhrInstance();\r\n\r\n            //Commonly accepted test for XHR CORS support.\r\n            return xhr.withCredentials !== undefined;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\r\n    function isXdrSupported() {\r\n        return window.XDomainRequest !== undefined;\r\n    }\r\n\r\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\r\n    // or if `XDomainRequest` is an available alternative.\r\n    function isCrossOriginAjaxSupported() {\r\n        if (isCrossOriginXhrSupported()) {\r\n            return true;\r\n        }\r\n\r\n        return isXdrSupported();\r\n    }\r\n\r\n    function isFolderSelectionSupported() {\r\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\r\n        return document.createElement(\"input\").webkitdirectory !== undefined;\r\n    }\r\n\r\n    function isLocalStorageSupported() {\r\n        try {\r\n            return !!window.localStorage &&\r\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\r\n                qq.isFunction(window.localStorage.setItem);\r\n        }\r\n        catch (error) {\r\n            // probably caught a security exception, so no localStorage for you\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isDragAndDropSupported() {\r\n        var span = document.createElement(\"span\");\r\n\r\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\r\n            !qq.android() && !qq.ios();\r\n    }\r\n\r\n    supportsUploading = testSupportsFileInputElement();\r\n\r\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\r\n\r\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\r\n\r\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\r\n\r\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\r\n\r\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\r\n\r\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\r\n\r\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\r\n\r\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\r\n\r\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\r\n\r\n    supportsDeleteFileXdr = isXdrSupported();\r\n\r\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\r\n\r\n    supportsFolderSelection = isFolderSelectionSupported();\r\n\r\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\r\n\r\n    supportsUploadProgress = (function() {\r\n        if (supportsAjaxFileUploading) {\r\n            return !qq.androidStock() && !qq.iosChrome();\r\n        }\r\n        return false;\r\n    }());\r\n\r\n    return {\r\n        ajaxUploading: supportsAjaxFileUploading,\r\n        blobUploading: supportsUploadingBlobs,\r\n        canDetermineSize: supportsAjaxFileUploading,\r\n        chunking: supportsChunking,\r\n        deleteFileCors: supportsDeleteFileCors,\r\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\r\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\r\n        dialogElement: !!window.HTMLDialogElement,\r\n        fileDrop: supportsFileDrop,\r\n        folderDrop: supportsFolderDrop,\r\n        folderSelection: supportsFolderSelection,\r\n        imagePreviews: supportsImagePreviews,\r\n        imageValidation: supportsImagePreviews,\r\n        itemSizeValidation: supportsAjaxFileUploading,\r\n        pause: supportsChunking,\r\n        progressBar: supportsUploadProgress,\r\n        resume: supportsResume,\r\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\r\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\r\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\r\n        uploading: supportsUploading,\r\n        uploadCors: supportsUploadCors,\r\n        uploadCustomHeaders: supportsAjaxFileUploading,\r\n        uploadNonMultipart: supportsAjaxFileUploading,\r\n        uploadViaPaste: supportsUploadViaPaste\r\n    };\r\n\r\n}());\r\n","/*globals qq*/\r\n\r\n// Is the passed object a promise instance?\r\nqq.isGenericPromise = function(maybePromise) {\r\n    \"use strict\";\r\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\r\n};\r\n\r\nqq.Promise = function() {\r\n    \"use strict\";\r\n\r\n    var successArgs, failureArgs,\r\n        successCallbacks = [],\r\n        failureCallbacks = [],\r\n        doneCallbacks = [],\r\n        state = 0;\r\n\r\n    qq.extend(this, {\r\n        then: function(onSuccess, onFailure) {\r\n            if (state === 0) {\r\n                if (onSuccess) {\r\n                    successCallbacks.push(onSuccess);\r\n                }\r\n                if (onFailure) {\r\n                    failureCallbacks.push(onFailure);\r\n                }\r\n            }\r\n            else if (state === -1) {\r\n                onFailure && onFailure.apply(null, failureArgs);\r\n            }\r\n            else if (onSuccess) {\r\n                onSuccess.apply(null, successArgs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        done: function(callback) {\r\n            if (state === 0) {\r\n                doneCallbacks.push(callback);\r\n            }\r\n            else {\r\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        success: function() {\r\n            state = 1;\r\n            successArgs = arguments;\r\n\r\n            if (successCallbacks.length) {\r\n                qq.each(successCallbacks, function(idx, callback) {\r\n                    callback.apply(null, successArgs);\r\n                });\r\n            }\r\n\r\n            if (doneCallbacks.length) {\r\n                qq.each(doneCallbacks, function(idx, callback) {\r\n                    callback.apply(null, successArgs);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        failure: function() {\r\n            state = -1;\r\n            failureArgs = arguments;\r\n\r\n            if (failureCallbacks.length) {\r\n                qq.each(failureCallbacks, function(idx, callback) {\r\n                    callback.apply(null, failureArgs);\r\n                });\r\n            }\r\n\r\n            if (doneCallbacks.length) {\r\n                qq.each(doneCallbacks, function(idx, callback) {\r\n                    callback.apply(null, failureArgs);\r\n                });\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Placeholder for a Blob that will be generated on-demand.\r\n *\r\n * @param referenceBlob Parent of the generated blob\r\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\r\n * @constructor\r\n */\r\nqq.BlobProxy = function(referenceBlob, onCreate) {\r\n    \"use strict\";\r\n\r\n    qq.extend(this, {\r\n        referenceBlob: referenceBlob,\r\n\r\n        create: function() {\r\n            return onCreate(referenceBlob);\r\n        }\r\n    });\r\n};\r\n","/*globals qq*/\r\n\r\n/**\r\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\r\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\r\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\r\n * provided here by adding CSS classes to the container on hover/focus.\r\n *\r\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\r\n * available on all supported browsers.\r\n *\r\n * @param o Options to override the default values\r\n */\r\nqq.UploadButton = function(o) {\r\n    \"use strict\";\r\n\r\n    var self = this,\r\n\r\n        disposeSupport = new qq.DisposeSupport(),\r\n\r\n        options = {\r\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\r\n            acceptFiles: null,\r\n\r\n            // \"Container\" element\r\n            element: null,\r\n\r\n            focusClass: \"qq-upload-button-focus\",\r\n\r\n            // A true value allows folders to be selected, if supported by the UA\r\n            folders: false,\r\n\r\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\r\n            hoverClass: \"qq-upload-button-hover\",\r\n\r\n            ios8BrowserCrashWorkaround: false,\r\n\r\n            // If true adds `multiple` attribute to `<input type=\"file\">`\r\n            multiple: false,\r\n\r\n            // `name` attribute of `<input type=\"file\">`\r\n            name: \"qqfile\",\r\n\r\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\r\n            onChange: function(input) {},\r\n\r\n            title: null\r\n        },\r\n        input, buttonId;\r\n\r\n    // Overrides any of the default option values with any option values passed in during construction.\r\n    qq.extend(options, o);\r\n\r\n    buttonId = qq.getUniqueId();\r\n\r\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\r\n    function createInput() {\r\n        var input = document.createElement(\"input\");\r\n\r\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\r\n        input.setAttribute(\"title\", options.title);\r\n\r\n        self.setMultiple(options.multiple, input);\r\n\r\n        if (options.folders && qq.supportedFeatures.folderSelection) {\r\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\r\n            input.setAttribute(\"webkitdirectory\", \"\");\r\n        }\r\n\r\n        if (options.acceptFiles) {\r\n            input.setAttribute(\"accept\", options.acceptFiles);\r\n        }\r\n\r\n        input.setAttribute(\"type\", \"file\");\r\n        input.setAttribute(\"name\", options.name);\r\n\r\n        qq(input).css({\r\n            position: \"absolute\",\r\n            // in Opera only 'browse' button\r\n            // is clickable and it is located at\r\n            // the right side of the input\r\n            right: 0,\r\n            top: 0,\r\n            fontFamily: \"Arial\",\r\n            // It's especially important to make this an arbitrarily large value\r\n            // to ensure the rendered input button in IE takes up the entire\r\n            // space of the container element.  Otherwise, the left side of the\r\n            // button will require a double-click to invoke the file chooser.\r\n            // In other browsers, this might cause other issues, so a large font-size\r\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\r\n            // in some cases when the font-size is large.  So, this workaround is not applied\r\n            // to IE8.\r\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\r\n            margin: 0,\r\n            padding: 0,\r\n            cursor: \"pointer\",\r\n            opacity: 0\r\n        });\r\n\r\n        // Setting the file input's height to 100% in IE7 causes\r\n        // most of the visible button to be unclickable.\r\n        !qq.ie7() && qq(input).css({height: \"100%\"});\r\n\r\n        options.element.appendChild(input);\r\n\r\n        disposeSupport.attach(input, \"change\", function() {\r\n            options.onChange(input);\r\n        });\r\n\r\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\r\n        disposeSupport.attach(input, \"mouseover\", function() {\r\n            qq(options.element).addClass(options.hoverClass);\r\n        });\r\n        disposeSupport.attach(input, \"mouseout\", function() {\r\n            qq(options.element).removeClass(options.hoverClass);\r\n        });\r\n\r\n        disposeSupport.attach(input, \"focus\", function() {\r\n            qq(options.element).addClass(options.focusClass);\r\n        });\r\n        disposeSupport.attach(input, \"blur\", function() {\r\n            qq(options.element).removeClass(options.focusClass);\r\n        });\r\n\r\n        return input;\r\n    }\r\n\r\n    // Make button suitable container for input\r\n    qq(options.element).css({\r\n        position: \"relative\",\r\n        overflow: \"hidden\",\r\n        // Make sure browse button is in the right side in Internet Explorer\r\n        direction: \"ltr\"\r\n    });\r\n\r\n    // Exposed API\r\n    qq.extend(this, {\r\n        getInput: function() {\r\n            return input;\r\n        },\r\n\r\n        getButtonId: function() {\r\n            return buttonId;\r\n        },\r\n\r\n        setMultiple: function(isMultiple, optInput) {\r\n            var input = optInput || this.getInput();\r\n\r\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\r\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\r\n            // See #1283.\r\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\r\n                input.setAttribute(\"multiple\", \"\");\r\n            }\r\n\r\n            else {\r\n                if (isMultiple) {\r\n                    input.setAttribute(\"multiple\", \"\");\r\n                }\r\n                else {\r\n                    input.removeAttribute(\"multiple\");\r\n                }\r\n            }\r\n        },\r\n\r\n        setAcceptFiles: function(acceptFiles) {\r\n            if (acceptFiles !== options.acceptFiles) {\r\n                input.setAttribute(\"accept\", acceptFiles);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            if (input.parentNode) {\r\n                qq(input).remove();\r\n            }\r\n\r\n            qq(options.element).removeClass(options.focusClass);\r\n            input = null;\r\n            input = createInput();\r\n        }\r\n    });\r\n\r\n    input = createInput();\r\n};\r\n\r\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\r\n","/*globals qq */\r\nqq.UploadData = function(uploaderProxy) {\r\n    \"use strict\";\r\n\r\n    var data = [],\r\n        byUuid = {},\r\n        byStatus = {},\r\n        byProxyGroupId = {},\r\n        byBatchId = {};\r\n\r\n    function getDataByIds(idOrIds) {\r\n        if (qq.isArray(idOrIds)) {\r\n            var entries = [];\r\n\r\n            qq.each(idOrIds, function(idx, id) {\r\n                entries.push(data[id]);\r\n            });\r\n\r\n            return entries;\r\n        }\r\n\r\n        return data[idOrIds];\r\n    }\r\n\r\n    function getDataByUuids(uuids) {\r\n        if (qq.isArray(uuids)) {\r\n            var entries = [];\r\n\r\n            qq.each(uuids, function(idx, uuid) {\r\n                entries.push(data[byUuid[uuid]]);\r\n            });\r\n\r\n            return entries;\r\n        }\r\n\r\n        return data[byUuid[uuids]];\r\n    }\r\n\r\n    function getDataByStatus(status) {\r\n        var statusResults = [],\r\n            statuses = [].concat(status);\r\n\r\n        qq.each(statuses, function(index, statusEnum) {\r\n            var statusResultIndexes = byStatus[statusEnum];\r\n\r\n            if (statusResultIndexes !== undefined) {\r\n                qq.each(statusResultIndexes, function(i, dataIndex) {\r\n                    statusResults.push(data[dataIndex]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return statusResults;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds a new file to the data cache for tracking purposes.\r\n         *\r\n         * @param spec Data that describes this file.  Possible properties are:\r\n         *\r\n         * - uuid: Initial UUID for this file.\r\n         * - name: Initial name of this file.\r\n         * - size: Size of this file, omit if this cannot be determined\r\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\r\n         * - batchId: ID of the batch this file belongs to\r\n         * - proxyGroupId: ID of the proxy group associated with this file\r\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\r\n         *\r\n         * @returns {number} Internal ID for this file.\r\n         */\r\n        addFile: function(spec) {\r\n            var status = spec.status || qq.status.SUBMITTING,\r\n                id = data.push({\r\n                    name: spec.name,\r\n                    originalName: spec.name,\r\n                    uuid: spec.uuid,\r\n                    size: spec.size == null ? -1 : spec.size,\r\n                    status: status\r\n                }) - 1;\r\n\r\n            if (spec.batchId) {\r\n                data[id].batchId = spec.batchId;\r\n\r\n                if (byBatchId[spec.batchId] === undefined) {\r\n                    byBatchId[spec.batchId] = [];\r\n                }\r\n                byBatchId[spec.batchId].push(id);\r\n            }\r\n\r\n            if (spec.proxyGroupId) {\r\n                data[id].proxyGroupId = spec.proxyGroupId;\r\n\r\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\r\n                    byProxyGroupId[spec.proxyGroupId] = [];\r\n                }\r\n                byProxyGroupId[spec.proxyGroupId].push(id);\r\n            }\r\n\r\n            data[id].id = id;\r\n            byUuid[spec.uuid] = id;\r\n\r\n            if (byStatus[status] === undefined) {\r\n                byStatus[status] = [];\r\n            }\r\n            byStatus[status].push(id);\r\n\r\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\r\n            uploaderProxy.onStatusChange(id, null, status);\r\n\r\n            return id;\r\n        },\r\n\r\n        retrieve: function(optionalFilter) {\r\n            if (qq.isObject(optionalFilter) && data.length)  {\r\n                if (optionalFilter.id !== undefined) {\r\n                    return getDataByIds(optionalFilter.id);\r\n                }\r\n\r\n                else if (optionalFilter.uuid !== undefined) {\r\n                    return getDataByUuids(optionalFilter.uuid);\r\n                }\r\n\r\n                else if (optionalFilter.status) {\r\n                    return getDataByStatus(optionalFilter.status);\r\n                }\r\n            }\r\n            else {\r\n                return qq.extend([], data, true);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            data = [];\r\n            byUuid = {};\r\n            byStatus = {};\r\n            byBatchId = {};\r\n        },\r\n\r\n        setStatus: function(id, newStatus) {\r\n            var oldStatus = data[id].status,\r\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\r\n\r\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\r\n\r\n            data[id].status = newStatus;\r\n\r\n            if (byStatus[newStatus] === undefined) {\r\n                byStatus[newStatus] = [];\r\n            }\r\n            byStatus[newStatus].push(id);\r\n\r\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\r\n        },\r\n\r\n        uuidChanged: function(id, newUuid) {\r\n            var oldUuid = data[id].uuid;\r\n\r\n            data[id].uuid = newUuid;\r\n            byUuid[newUuid] = id;\r\n            delete byUuid[oldUuid];\r\n        },\r\n\r\n        updateName: function(id, newName) {\r\n            data[id].name = newName;\r\n        },\r\n\r\n        updateSize: function(id, newSize) {\r\n            data[id].size = newSize;\r\n        },\r\n\r\n        // Only applicable if this file has a parent that we may want to reference later.\r\n        setParentId: function(targetId, parentId) {\r\n            data[targetId].parentId = parentId;\r\n        },\r\n\r\n        getIdsInProxyGroup: function(id) {\r\n            var proxyGroupId = data[id].proxyGroupId;\r\n\r\n            if (proxyGroupId) {\r\n                return byProxyGroupId[proxyGroupId];\r\n            }\r\n            return [];\r\n        },\r\n\r\n        getIdsInBatch: function(id) {\r\n            var batchId = data[id].batchId;\r\n\r\n            return byBatchId[batchId];\r\n        }\r\n    });\r\n};\r\n\r\nqq.status = {\r\n    SUBMITTING: \"submitting\",\r\n    SUBMITTED: \"submitted\",\r\n    REJECTED: \"rejected\",\r\n    QUEUED: \"queued\",\r\n    CANCELED: \"canceled\",\r\n    PAUSED: \"paused\",\r\n    UPLOADING: \"uploading\",\r\n    UPLOAD_RETRYING: \"retrying upload\",\r\n    UPLOAD_SUCCESSFUL: \"upload successful\",\r\n    UPLOAD_FAILED: \"upload failed\",\r\n    DELETE_FAILED: \"delete failed\",\r\n    DELETING: \"deleting\",\r\n    DELETED: \"deleted\"\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Defines the public API for FineUploaderBasic mode.\r\n */\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.basePublicApi = {\r\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\r\n        addBlobs: function(blobDataOrArray, params, endpoint) {\r\n            this.addFiles(blobDataOrArray, params, endpoint);\r\n        },\r\n\r\n        addInitialFiles: function(cannedFileList) {\r\n            var self = this;\r\n\r\n            qq.each(cannedFileList, function(index, cannedFile) {\r\n                self._addCannedFile(cannedFile);\r\n            });\r\n        },\r\n\r\n        addFiles: function(data, params, endpoint) {\r\n            this._maybeHandleIos8SafariWorkaround();\r\n\r\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\r\n\r\n                processBlob = qq.bind(function(blob) {\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processBlobData = qq.bind(function(blobData) {\r\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvas = qq.bind(function(canvas) {\r\n                    var blob = qq.canvasToBlob(canvas);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: this._options.blobs.defaultName + \".png\"\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processCanvasData = qq.bind(function(canvasData) {\r\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\r\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\r\n\r\n                    this._handleNewFile({\r\n                        blob: blob,\r\n                        name: canvasData.name\r\n                    }, batchId, verifiedFiles);\r\n                }, this),\r\n\r\n                processFileOrInput = qq.bind(function(fileOrInput) {\r\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\r\n                        var files = Array.prototype.slice.call(fileOrInput.files),\r\n                            self = this;\r\n\r\n                        qq.each(files, function(idx, file) {\r\n                            self._handleNewFile(file, batchId, verifiedFiles);\r\n                        });\r\n                    }\r\n                    else {\r\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\r\n                    }\r\n                }, this),\r\n\r\n                normalizeData = function() {\r\n                    if (qq.isFileList(data)) {\r\n                        data = Array.prototype.slice.call(data);\r\n                    }\r\n                    data = [].concat(data);\r\n                },\r\n\r\n                self = this,\r\n                verifiedFiles = [];\r\n\r\n            this._currentBatchId = batchId;\r\n\r\n            if (data) {\r\n                normalizeData();\r\n\r\n                qq.each(data, function(idx, fileContainer) {\r\n                    if (qq.isFileOrInput(fileContainer)) {\r\n                        processFileOrInput(fileContainer);\r\n                    }\r\n                    else if (qq.isBlob(fileContainer)) {\r\n                        processBlob(fileContainer);\r\n                    }\r\n                    else if (qq.isObject(fileContainer)) {\r\n                        if (fileContainer.blob && fileContainer.name) {\r\n                            processBlobData(fileContainer);\r\n                        }\r\n                        else if (fileContainer.canvas && fileContainer.name) {\r\n                            processCanvasData(fileContainer);\r\n                        }\r\n                    }\r\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\r\n                        processCanvas(fileContainer);\r\n                    }\r\n                    else {\r\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\r\n                    }\r\n                });\r\n\r\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\r\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\r\n            }\r\n        },\r\n\r\n        cancel: function(id) {\r\n            this._handler.cancel(id);\r\n        },\r\n\r\n        cancelAll: function() {\r\n            var storedIdsCopy = [],\r\n                self = this;\r\n\r\n            qq.extend(storedIdsCopy, this._storedIds);\r\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\r\n                self.cancel(storedFileId);\r\n            });\r\n\r\n            this._handler.cancelAll();\r\n        },\r\n\r\n        clearStoredFiles: function() {\r\n            this._storedIds = [];\r\n        },\r\n\r\n        continueUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (uploadData.status === qq.status.PAUSED) {\r\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\r\n                this._uploadFile(id);\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        deleteFile: function(id) {\r\n            return this._onSubmitDelete(id);\r\n        },\r\n\r\n        // TODO document?\r\n        doesExist: function(fileOrBlobId) {\r\n            return this._handler.isValid(fileOrBlobId);\r\n        },\r\n\r\n        // Generate a variable size thumbnail on an img or canvas,\r\n        // returning a promise that is fulfilled when the attempt completes.\r\n        // Thumbnail can either be based off of a URL for an image returned\r\n        // by the server in the upload response, or the associated `Blob`.\r\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\r\n            var promiseToReturn = new qq.Promise(),\r\n                fileOrUrl, options;\r\n\r\n            if (this._imageGenerator) {\r\n                fileOrUrl = this._thumbnailUrls[fileId];\r\n                options = {\r\n                    customResizeFunction: customResizeFunction,\r\n                    maxSize: maxSize > 0 ? maxSize : null,\r\n                    scale: maxSize > 0\r\n                };\r\n\r\n                // If client-side preview generation is possible\r\n                // and we are not specifically looking for the image URl returned by the server...\r\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\r\n                    fileOrUrl = this.getFile(fileId);\r\n                }\r\n\r\n                /* jshint eqeqeq:false,eqnull:true */\r\n                if (fileOrUrl == null) {\r\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\r\n                }\r\n                else {\r\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\r\n                        function success(modifiedContainer) {\r\n                            promiseToReturn.success(modifiedContainer);\r\n                        },\r\n\r\n                        function failure(container, reason) {\r\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\r\n            }\r\n\r\n            return promiseToReturn;\r\n        },\r\n\r\n        getButton: function(fileId) {\r\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\r\n        },\r\n\r\n        getEndpoint: function(fileId) {\r\n            return this._endpointStore.get(fileId);\r\n        },\r\n\r\n        getFile: function(fileOrBlobId) {\r\n            return this._handler.getFile(fileOrBlobId) || null;\r\n        },\r\n\r\n        getInProgress: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        getName: function(id) {\r\n            return this._uploadData.retrieve({id: id}).name;\r\n        },\r\n\r\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\r\n        getParentId: function(id) {\r\n            var uploadDataEntry = this.getUploads({id: id}),\r\n                parentId = null;\r\n\r\n            if (uploadDataEntry) {\r\n                if (uploadDataEntry.parentId !== undefined) {\r\n                    parentId = uploadDataEntry.parentId;\r\n                }\r\n            }\r\n\r\n            return parentId;\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            return this._handler.getResumableFilesData();\r\n        },\r\n\r\n        getSize: function(id) {\r\n            return this._uploadData.retrieve({id: id}).size;\r\n        },\r\n\r\n        getNetUploads: function() {\r\n            return this._netUploaded;\r\n        },\r\n\r\n        getRemainingAllowedItems: function() {\r\n            var allowedItems = this._currentItemLimit;\r\n\r\n            if (allowedItems > 0) {\r\n                return allowedItems - this._netUploadedOrQueued;\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        getUploads: function(optionalFilter) {\r\n            return this._uploadData.retrieve(optionalFilter);\r\n        },\r\n\r\n        getUuid: function(id) {\r\n            return this._uploadData.retrieve({id: id}).uuid;\r\n        },\r\n\r\n        log: function(str, level) {\r\n            if (this._options.debug && (!level || level === \"info\")) {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\r\n            }\r\n            else if (level && level !== \"info\") {\r\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\r\n\r\n            }\r\n        },\r\n\r\n        pauseUpload: function(id) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\r\n                return false;\r\n            }\r\n\r\n            // Pause only really makes sense if the file is uploading or retrying\r\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\r\n                if (this._handler.pause(id)) {\r\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\r\n                    return true;\r\n                }\r\n                else {\r\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\r\n                }\r\n            }\r\n            else {\r\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        removeFileRef: function(id) {\r\n            this._handler.expunge(id);\r\n        },\r\n\r\n        reset: function() {\r\n            this.log(\"Resetting uploader...\");\r\n\r\n            this._handler.reset();\r\n            this._storedIds = [];\r\n            this._autoRetries = [];\r\n            this._retryTimeouts = [];\r\n            this._preventRetries = [];\r\n            this._thumbnailUrls = [];\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n\r\n            this._paramsStore.reset();\r\n            this._endpointStore.reset();\r\n            this._netUploadedOrQueued = 0;\r\n            this._netUploaded = 0;\r\n            this._uploadData.reset();\r\n            this._buttonIdsForFileIds = [];\r\n\r\n            this._pasteHandler && this._pasteHandler.reset();\r\n            this._options.session.refreshOnReset && this._refreshSessionData();\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n\r\n            this._totalProgress && this._totalProgress.reset();\r\n        },\r\n\r\n        retry: function(id) {\r\n            return this._manualRetry(id);\r\n        },\r\n\r\n        scaleImage: function(id, specs) {\r\n            var self = this;\r\n\r\n            return qq.Scaler.prototype.scaleImage(id, specs, {\r\n                log: qq.bind(self.log, self),\r\n                getFile: qq.bind(self.getFile, self),\r\n                uploadData: self._uploadData\r\n            });\r\n        },\r\n\r\n        setCustomHeaders: function(headers, id) {\r\n            this._customHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileCustomHeaders: function(headers, id) {\r\n            this._deleteFileCustomHeadersStore.set(headers, id);\r\n        },\r\n\r\n        setDeleteFileEndpoint: function(endpoint, id) {\r\n            this._deleteFileEndpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setDeleteFileParams: function(params, id) {\r\n            this._deleteFileParamsStore.set(params, id);\r\n        },\r\n\r\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\r\n        setEndpoint: function(endpoint, id) {\r\n            this._endpointStore.set(endpoint, id);\r\n        },\r\n\r\n        setForm: function(elementOrId) {\r\n            this._updateFormSupportAndParams(elementOrId);\r\n        },\r\n\r\n        setItemLimit: function(newItemLimit) {\r\n            this._currentItemLimit = newItemLimit;\r\n        },\r\n\r\n        setName: function(id, newName) {\r\n            this._uploadData.updateName(id, newName);\r\n        },\r\n\r\n        setParams: function(params, id) {\r\n            this._paramsStore.set(params, id);\r\n        },\r\n\r\n        setUuid: function(id, newUuid) {\r\n            return this._uploadData.uuidChanged(id, newUuid);\r\n        },\r\n\r\n        /**\r\n         * Expose the internal status of a file id to the public api for manual state changes\r\n         * @public\r\n         *\r\n         * @param {Number} id,\r\n         * @param {String} newStatus\r\n         *\r\n         * @todo Implement the remaining methods\r\n         */\r\n        setStatus: function(id, newStatus) {\r\n            var fileRecord = this.getUploads({id: id});\r\n            if (!fileRecord) {\r\n                throw new qq.Error(id + \" is not a valid file ID.\");\r\n            }\r\n\r\n            switch (newStatus) {\r\n                case qq.status.DELETED:\r\n                    this._onDeleteComplete(id, null, false);\r\n                    break;\r\n                case qq.status.DELETE_FAILED:\r\n                    this._onDeleteComplete(id, null, true);\r\n                    break;\r\n                default:\r\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\r\n                    this.log(errorMessage);\r\n                    throw new qq.Error(errorMessage);\r\n            }\r\n        },\r\n\r\n        uploadStoredFiles: function() {\r\n            if (this._storedIds.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n            }\r\n            else {\r\n                this._uploadStoredFiles();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Defines the private (internal) API for FineUploaderBasic mode.\r\n     */\r\n    qq.basePrivateApi = {\r\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\r\n        _addCannedFile: function(sessionData) {\r\n            var self = this;\r\n\r\n            return this._uploadData.addFile({\r\n                uuid: sessionData.uuid,\r\n                name: sessionData.name,\r\n                size: sessionData.size,\r\n                status: qq.status.UPLOAD_SUCCESSFUL,\r\n                onBeforeStatusChange: function(id) {\r\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\r\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\r\n\r\n                    if (sessionData.thumbnailUrl) {\r\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\r\n                    }\r\n\r\n                    self._netUploaded++;\r\n                    self._netUploadedOrQueued++;\r\n                }\r\n            });\r\n        },\r\n\r\n        _annotateWithButtonId: function(file, associatedInput) {\r\n            if (qq.isFile(file)) {\r\n                file.qqButtonId = this._getButtonId(associatedInput);\r\n            }\r\n        },\r\n\r\n        _batchError: function(message) {\r\n            this._options.callbacks.onError(null, null, message, undefined);\r\n        },\r\n\r\n        _createDeleteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.DeleteFileAjaxRequester({\r\n                method: this._options.deleteFile.method.toUpperCase(),\r\n                maxConnections: this._options.maxConnections,\r\n                uuidParamName: this._options.request.uuidName,\r\n                customHeaders: this._deleteFileCustomHeadersStore,\r\n                paramsStore: this._deleteFileParamsStore,\r\n                endpointStore: this._deleteFileEndpointStore,\r\n                cors: this._options.cors,\r\n                log: qq.bind(self.log, self),\r\n                onDelete: function(id) {\r\n                    self._onDelete(id);\r\n                    self._options.callbacks.onDelete(id);\r\n                },\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\r\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\r\n                }\r\n\r\n            });\r\n        },\r\n\r\n        _createPasteHandler: function() {\r\n            var self = this;\r\n\r\n            return new qq.PasteSupport({\r\n                targetElement: this._options.paste.targetElement,\r\n                callbacks: {\r\n                    log: qq.bind(self.log, self),\r\n                    pasteReceived: function(blob) {\r\n                        self._handleCheckedCallback({\r\n                            name: \"onPasteReceived\",\r\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\r\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\r\n                            identifier: \"pasted image\"\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        _createStore: function(initialValue, _readOnlyValues_) {\r\n            var store = {},\r\n                catchall = initialValue,\r\n                perIdReadOnlyValues = {},\r\n                readOnlyValues = _readOnlyValues_,\r\n                copy = function(orig) {\r\n                    if (qq.isObject(orig)) {\r\n                        return qq.extend({}, orig);\r\n                    }\r\n                    return orig;\r\n                },\r\n                getReadOnlyValues = function() {\r\n                    if (qq.isFunction(readOnlyValues)) {\r\n                        return readOnlyValues();\r\n                    }\r\n                    return readOnlyValues;\r\n                },\r\n                includeReadOnlyValues = function(id, existing) {\r\n                    if (readOnlyValues && qq.isObject(existing)) {\r\n                        qq.extend(existing, getReadOnlyValues());\r\n                    }\r\n\r\n                    if (perIdReadOnlyValues[id]) {\r\n                        qq.extend(existing, perIdReadOnlyValues[id]);\r\n                    }\r\n                };\r\n\r\n            return {\r\n                set: function(val, id) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id == null) {\r\n                        store = {};\r\n                        catchall = copy(val);\r\n                    }\r\n                    else {\r\n                        store[id] = copy(val);\r\n                    }\r\n                },\r\n\r\n                get: function(id) {\r\n                    var values;\r\n\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    if (id != null && store[id]) {\r\n                        values = store[id];\r\n                    }\r\n                    else {\r\n                        values = copy(catchall);\r\n                    }\r\n\r\n                    includeReadOnlyValues(id, values);\r\n\r\n                    return copy(values);\r\n                },\r\n\r\n                addReadOnly: function(id, values) {\r\n                    // Only applicable to Object stores\r\n                    if (qq.isObject(store)) {\r\n                        // If null ID, apply readonly values to all files\r\n                        if (id === null) {\r\n                            if (qq.isFunction(values)) {\r\n                                readOnlyValues = values;\r\n                            }\r\n                            else {\r\n                                readOnlyValues = readOnlyValues || {};\r\n                                qq.extend(readOnlyValues, values);\r\n                            }\r\n                        }\r\n                        else {\r\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\r\n                            qq.extend(perIdReadOnlyValues[id], values);\r\n                        }\r\n                    }\r\n                },\r\n\r\n                remove: function(fileId) {\r\n                    return delete store[fileId];\r\n                },\r\n\r\n                reset: function() {\r\n                    store = {};\r\n                    perIdReadOnlyValues = {};\r\n                    catchall = initialValue;\r\n                }\r\n            };\r\n        },\r\n\r\n        _createUploadDataTracker: function() {\r\n            var self = this;\r\n\r\n            return new qq.UploadData({\r\n                getName: function(id) {\r\n                    return self.getName(id);\r\n                },\r\n                getUuid: function(id) {\r\n                    return self.getUuid(id);\r\n                },\r\n                getSize: function(id) {\r\n                    return self.getSize(id);\r\n                },\r\n                onStatusChange: function(id, oldStatus, newStatus) {\r\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\r\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\r\n                    self._maybeAllComplete(id, newStatus);\r\n\r\n                    if (self._totalProgress) {\r\n                        setTimeout(function() {\r\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\r\n                        }, 0);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Generate a tracked upload button.\r\n         *\r\n         * @param spec Object containing a required `element` property\r\n         * along with optional `multiple`, `accept`, and `folders`.\r\n         * @returns {qq.UploadButton}\r\n         * @private\r\n         */\r\n        _createUploadButton: function(spec) {\r\n            var self = this,\r\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\r\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\r\n                button;\r\n\r\n            function allowMultiple() {\r\n                if (qq.supportedFeatures.ajaxUploading) {\r\n                    // Workaround for bug in iOS7+ (see #1039)\r\n                    if (self._options.workarounds.iosEmptyVideos &&\r\n                        qq.ios() &&\r\n                        !qq.ios6() &&\r\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (spec.multiple === undefined) {\r\n                        return self._options.multiple;\r\n                    }\r\n\r\n                    return spec.multiple;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            button = new qq.UploadButton({\r\n                acceptFiles: acceptFiles,\r\n                element: spec.element,\r\n                focusClass: this._options.classes.buttonFocus,\r\n                folders: spec.folders,\r\n                hoverClass: this._options.classes.buttonHover,\r\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\r\n                multiple: allowMultiple(),\r\n                name: this._options.request.inputName,\r\n                onChange: function(input) {\r\n                    self._onInputChange(input);\r\n                },\r\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\r\n            });\r\n\r\n            this._disposeSupport.addDisposer(function() {\r\n                button.dispose();\r\n            });\r\n\r\n            self._buttons.push(button);\r\n\r\n            return button;\r\n        },\r\n\r\n        _createUploadHandler: function(additionalOptions, namespace) {\r\n            var self = this,\r\n                lastOnProgress = {},\r\n                options = {\r\n                    debug: this._options.debug,\r\n                    maxConnections: this._options.maxConnections,\r\n                    cors: this._options.cors,\r\n                    paramsStore: this._paramsStore,\r\n                    endpointStore: this._endpointStore,\r\n                    chunking: this._options.chunking,\r\n                    resume: this._options.resume,\r\n                    blobs: this._options.blobs,\r\n                    log: qq.bind(self.log, self),\r\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\r\n                    onProgress: function(id, name, loaded, total) {\r\n                        if (loaded < 0 || total < 0) {\r\n                            return;\r\n                        }\r\n\r\n                        if (lastOnProgress[id]) {\r\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\r\n                                self._onProgress(id, name, loaded, total);\r\n                                self._options.callbacks.onProgress(id, name, loaded, total);\r\n                            }\r\n                        }\r\n                        else {\r\n                            self._onProgress(id, name, loaded, total);\r\n                            self._options.callbacks.onProgress(id, name, loaded, total);\r\n                        }\r\n\r\n                        lastOnProgress[id] = {loaded: loaded, total: total};\r\n\r\n                    },\r\n                    onComplete: function(id, name, result, xhr) {\r\n                        delete lastOnProgress[id];\r\n\r\n                        var status = self.getUploads({id: id}).status,\r\n                            retVal;\r\n\r\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\r\n                        // invoked by the browser multiple times for the same XHR instance with the same state\r\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\r\n                        // done this.\r\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\r\n                            return;\r\n                        }\r\n\r\n                        retVal = self._onComplete(id, name, result, xhr);\r\n\r\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\r\n                        // until the promise has been fulfilled.\r\n                        if (retVal instanceof  qq.Promise) {\r\n                            retVal.done(function() {\r\n                                self._options.callbacks.onComplete(id, name, result, xhr);\r\n                            });\r\n                        }\r\n                        else {\r\n                            self._options.callbacks.onComplete(id, name, result, xhr);\r\n                        }\r\n                    },\r\n                    onCancel: function(id, name, cancelFinalizationEffort) {\r\n                        var promise = new qq.Promise();\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onCancel\",\r\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\r\n                            onFailure: promise.failure,\r\n                            onSuccess: function() {\r\n                                cancelFinalizationEffort.then(function() {\r\n                                    self._onCancel(id, name);\r\n                                });\r\n\r\n                                promise.success();\r\n                            },\r\n                            identifier: id\r\n                        });\r\n\r\n                        return promise;\r\n                    },\r\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\r\n                    onUpload: function(id, name) {\r\n                        self._onUpload(id, name);\r\n                        self._options.callbacks.onUpload(id, name);\r\n                    },\r\n                    onUploadChunk: function(id, name, chunkData) {\r\n                        self._onUploadChunk(id, chunkData);\r\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\r\n                    },\r\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\r\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\r\n                    },\r\n                    onResume: function(id, name, chunkData) {\r\n                        return self._options.callbacks.onResume(id, name, chunkData);\r\n                    },\r\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\r\n                        return self._onAutoRetry.apply(self, arguments);\r\n                    },\r\n                    onUuidChanged: function(id, newUuid) {\r\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\r\n                        self.setUuid(id, newUuid);\r\n                    },\r\n                    getName: qq.bind(self.getName, self),\r\n                    getUuid: qq.bind(self.getUuid, self),\r\n                    getSize: qq.bind(self.getSize, self),\r\n                    setSize: qq.bind(self._setSize, self),\r\n                    getDataByUuid: function(uuid) {\r\n                        return self.getUploads({uuid: uuid});\r\n                    },\r\n                    isQueued: function(id) {\r\n                        var status = self.getUploads({id: id}).status;\r\n                        return status === qq.status.QUEUED ||\r\n                            status === qq.status.SUBMITTED ||\r\n                            status === qq.status.UPLOAD_RETRYING ||\r\n                            status === qq.status.PAUSED;\r\n                    },\r\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\r\n                    getIdsInBatch: self._uploadData.getIdsInBatch\r\n                };\r\n\r\n            qq.each(this._options.request, function(prop, val) {\r\n                options[prop] = val;\r\n            });\r\n\r\n            options.customHeaders = this._customHeadersStore;\r\n\r\n            if (additionalOptions) {\r\n                qq.each(additionalOptions, function(key, val) {\r\n                    options[key] = val;\r\n                });\r\n            }\r\n\r\n            return new qq.UploadHandlerController(options, namespace);\r\n        },\r\n\r\n        _fileOrBlobRejected: function(id) {\r\n            this._netUploadedOrQueued--;\r\n            this._uploadData.setStatus(id, qq.status.REJECTED);\r\n        },\r\n\r\n        _formatSize: function(bytes) {\r\n            if (bytes === 0) {\r\n                return bytes + this._options.text.sizeSymbols[0];\r\n            }\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1000;\r\n                i++;\r\n            } while (bytes > 999);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\r\n        },\r\n\r\n        // Creates an internal object that tracks various properties of each extra button,\r\n        // and then actually creates the extra button.\r\n        _generateExtraButtonSpecs: function() {\r\n            var self = this;\r\n\r\n            this._extraButtonSpecs = {};\r\n\r\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\r\n                var multiple = extraButtonOptionEntry.multiple,\r\n                    validation = qq.extend({}, self._options.validation, true),\r\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\r\n\r\n                if (multiple === undefined) {\r\n                    multiple = self._options.multiple;\r\n                }\r\n\r\n                if (extraButtonSpec.validation) {\r\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\r\n                }\r\n\r\n                qq.extend(extraButtonSpec, {\r\n                    multiple: multiple,\r\n                    validation: validation\r\n                }, true);\r\n\r\n                self._initExtraButton(extraButtonSpec);\r\n            });\r\n        },\r\n\r\n        _getButton: function(buttonId) {\r\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            if (extraButtonsSpec) {\r\n                return extraButtonsSpec.element;\r\n            }\r\n            else if (buttonId === this._defaultButtonId) {\r\n                return this._options.button;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the internally used tracking ID for a button.\r\n         *\r\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\r\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\r\n         * @private\r\n         */\r\n        _getButtonId: function(buttonOrFileInputOrFile) {\r\n            var inputs, fileInput,\r\n                fileBlobOrInput = buttonOrFileInputOrFile;\r\n\r\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\r\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\r\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\r\n            }\r\n\r\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\r\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\r\n                if (qq.isFile(fileBlobOrInput)) {\r\n                    return fileBlobOrInput.qqButtonId;\r\n                }\r\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\r\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\r\n\r\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n\r\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\r\n\r\n                qq.each(inputs, function(idx, input) {\r\n                    if (input.getAttribute(\"type\") === \"file\") {\r\n                        fileInput = input;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                if (fileInput) {\r\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\r\n                }\r\n            }\r\n        },\r\n\r\n        _getNotFinished: function() {\r\n            return this._uploadData.retrieve({\r\n                status: [\r\n                    qq.status.UPLOADING,\r\n                    qq.status.UPLOAD_RETRYING,\r\n                    qq.status.QUEUED,\r\n                    qq.status.SUBMITTING,\r\n                    qq.status.SUBMITTED,\r\n                    qq.status.PAUSED\r\n                ]\r\n            }).length;\r\n        },\r\n\r\n        // Get the validation options for this button.  Could be the default validation option\r\n        // or a specific one assigned to this particular button.\r\n        _getValidationBase: function(buttonId) {\r\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\r\n\r\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\r\n        },\r\n\r\n        _getValidationDescriptor: function(fileWrapper) {\r\n            if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                return {\r\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\r\n                    size: fileWrapper.file.referenceBlob.size\r\n                };\r\n            }\r\n\r\n            return {\r\n                name: this.getUploads({id: fileWrapper.id}).name,\r\n                size: this.getUploads({id: fileWrapper.id}).size\r\n            };\r\n        },\r\n\r\n        _getValidationDescriptors: function(fileWrappers) {\r\n            var self = this,\r\n                fileDescriptors = [];\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\r\n            });\r\n\r\n            return fileDescriptors;\r\n        },\r\n\r\n        // Allows camera access on either the default or an extra button for iOS devices.\r\n        _handleCameraAccess: function() {\r\n            if (this._options.camera.ios && qq.ios()) {\r\n                var acceptIosCamera = \"image/*;capture=camera\",\r\n                    button = this._options.camera.button,\r\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\r\n                    optionRoot = this._options;\r\n\r\n                // If we are not targeting the default button, it is an \"extra\" button\r\n                if (buttonId && buttonId !== this._defaultButtonId) {\r\n                    optionRoot = this._extraButtonSpecs[buttonId];\r\n                }\r\n\r\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\r\n                optionRoot.multiple = false;\r\n\r\n                // update the options\r\n                if (optionRoot.validation.acceptFiles === null) {\r\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\r\n                }\r\n                else {\r\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\r\n                }\r\n\r\n                // update the already-created button\r\n                qq.each(this._buttons, function(idx, button) {\r\n                    if (button.getButtonId() === buttonId) {\r\n                        button.setMultiple(optionRoot.multiple);\r\n                        button.setAcceptFiles(optionRoot.acceptFiles);\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _handleCheckedCallback: function(details) {\r\n            var self = this,\r\n                callbackRetVal = details.callback();\r\n\r\n            if (qq.isGenericPromise(callbackRetVal)) {\r\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\r\n                return callbackRetVal.then(\r\n                    function(successParam) {\r\n                        self.log(details.name + \" promise success for \" + details.identifier);\r\n                        details.onSuccess(successParam);\r\n                    },\r\n                    function() {\r\n                        if (details.onFailure) {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                            details.onFailure();\r\n                        }\r\n                        else {\r\n                            self.log(details.name + \" promise failure for \" + details.identifier);\r\n                        }\r\n                    });\r\n            }\r\n\r\n            if (callbackRetVal !== false) {\r\n                details.onSuccess(callbackRetVal);\r\n            }\r\n            else {\r\n                if (details.onFailure) {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\r\n                    details.onFailure();\r\n                }\r\n                else {\r\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\r\n                }\r\n            }\r\n\r\n            return callbackRetVal;\r\n        },\r\n\r\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\r\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\r\n            var self = this,\r\n                uuid = qq.getUniqueId(),\r\n                size = -1,\r\n                name = qq.getFilename(file),\r\n                actualFile = file.blob || file,\r\n                handler = this._customNewFileHandler ?\r\n                    this._customNewFileHandler :\r\n                    qq.bind(self._handleNewFileGeneric, self);\r\n\r\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\r\n                size = actualFile.size;\r\n            }\r\n\r\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\r\n                uploadData: self._uploadData,\r\n                paramsStore: self._paramsStore,\r\n                addFileToHandler: function(id, file) {\r\n                    self._handler.add(id, file);\r\n                    self._netUploadedOrQueued++;\r\n                    self._trackButton(id);\r\n                }\r\n            });\r\n        },\r\n\r\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\r\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\r\n\r\n            this._handler.add(id, file);\r\n            this._trackButton(id);\r\n\r\n            this._netUploadedOrQueued++;\r\n\r\n            fileList.push({id: id, file: file});\r\n        },\r\n\r\n        _handlePasteSuccess: function(blob, extSuppliedName) {\r\n            var extension = blob.type.split(\"/\")[1],\r\n                name = extSuppliedName;\r\n\r\n            /*jshint eqeqeq: true, eqnull: true*/\r\n            if (name == null) {\r\n                name = this._options.paste.defaultName;\r\n            }\r\n\r\n            name += \".\" + extension;\r\n\r\n            this.addFiles({\r\n                name: name,\r\n                blob: blob\r\n            });\r\n        },\r\n\r\n        _handleDeleteSuccess: function(id) {\r\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\r\n                var name = this.getName(id);\r\n\r\n                this._netUploadedOrQueued--;\r\n                this._netUploaded--;\r\n                this._handler.expunge(id);\r\n                this._uploadData.setStatus(id, qq.status.DELETED);\r\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\r\n            }\r\n        },\r\n\r\n        _handleDeleteFailed: function(id, xhrOrXdr) {\r\n            var name = this.getName(id);\r\n\r\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\r\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\r\n\r\n            // Check first if xhrOrXdr is actually passed or valid\r\n            // For error reporting, we only have access to the response status if this is not\r\n            // an `XDomainRequest`.\r\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\r\n            }\r\n            else {\r\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\r\n            }\r\n        },\r\n\r\n        // Creates an extra button element\r\n        _initExtraButton: function(spec) {\r\n            var button = this._createUploadButton({\r\n                accept: spec.validation.acceptFiles,\r\n                allowedExtensions: spec.validation.allowedExtensions,\r\n                element: spec.element,\r\n                folders: spec.folders,\r\n                multiple: spec.multiple,\r\n                title: spec.fileInputTitle\r\n            });\r\n\r\n            this._extraButtonSpecs[button.getButtonId()] = spec;\r\n        },\r\n\r\n        _initFormSupportAndParams: function() {\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n            );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore = this._createStore(\r\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\r\n                );\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\r\n                }\r\n            }\r\n            else {\r\n                this._paramsStore = this._createStore(this._options.request.params);\r\n            }\r\n        },\r\n\r\n        _isDeletePossible: function() {\r\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\r\n                return false;\r\n            }\r\n\r\n            if (this._options.cors.expected) {\r\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\r\n                    return true;\r\n                }\r\n\r\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _isAllowedExtension: function(allowed, fileName) {\r\n            var valid = false;\r\n\r\n            if (!allowed.length) {\r\n                return true;\r\n            }\r\n\r\n            qq.each(allowed, function(idx, allowedExt) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExt)) {\r\n                    /*jshint eqeqeq: true, eqnull: true*/\r\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\r\n\r\n                    if (fileName.match(extRegex) != null) {\r\n                        valid = true;\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return valid;\r\n        },\r\n\r\n        /**\r\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\r\n         *\r\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\r\n         * @param maybeNameOrNames names of the items that have failed, if applicable\r\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\r\n         * @private\r\n         */\r\n        _itemError: function(code, maybeNameOrNames, item) {\r\n            var message = this._options.messages[code],\r\n                allowedExtensions = [],\r\n                names = [].concat(maybeNameOrNames),\r\n                name = names[0],\r\n                buttonId = this._getButtonId(item),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                extensionsForMessage, placeholderMatch;\r\n\r\n            function r(name, replacement) { message = message.replace(name, replacement); }\r\n\r\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\r\n                /**\r\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\r\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\r\n                 */\r\n                if (qq.isString(allowedExtension)) {\r\n                    allowedExtensions.push(allowedExtension);\r\n                }\r\n            });\r\n\r\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\r\n\r\n            r(\"{file}\", this._options.formatFileName(name));\r\n            r(\"{extensions}\", extensionsForMessage);\r\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\r\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\r\n\r\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\r\n            if (placeholderMatch !== null) {\r\n                qq.each(placeholderMatch, function(idx, placeholder) {\r\n                    r(placeholder, names[idx]);\r\n                });\r\n            }\r\n\r\n            this._options.callbacks.onError(null, name, message, undefined);\r\n\r\n            return message;\r\n        },\r\n\r\n        /**\r\n         * Conditionally orders a manual retry of a failed upload.\r\n         *\r\n         * @param id File ID of the failed upload\r\n         * @param callback Optional callback to invoke if a retry is prudent.\r\n         * In lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if a manual retry will occur\r\n         * @private\r\n         */\r\n        _manualRetry: function(id, callback) {\r\n            if (this._onBeforeManualRetry(id)) {\r\n                this._netUploadedOrQueued++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n\r\n                if (callback) {\r\n                    callback(id);\r\n                }\r\n                else {\r\n                    this._handler.retry(id);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _maybeAllComplete: function(id, status) {\r\n            var self = this,\r\n                notFinished = this._getNotFinished();\r\n\r\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\r\n                this._succeededSinceLastAllComplete.push(id);\r\n            }\r\n            else if (status === qq.status.UPLOAD_FAILED) {\r\n                this._failedSinceLastAllComplete.push(id);\r\n            }\r\n\r\n            if (notFinished === 0 &&\r\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\r\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\r\n                setTimeout(function() {\r\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _maybeHandleIos8SafariWorkaround: function() {\r\n            var self = this;\r\n\r\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\r\n                setTimeout(function() {\r\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\r\n                }, 0);\r\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\r\n            }\r\n        },\r\n\r\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\r\n            // Assuming no one will actually set the response code to something other than 200\r\n            // and still set 'success' to true...\r\n            if (!response.success) {\r\n                if (xhr && xhr.status !== 200 && !response.error) {\r\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\r\n                }\r\n                else {\r\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\r\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\r\n            var self = this;\r\n\r\n            if (items.length > index) {\r\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\r\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\r\n                    setTimeout(function() {\r\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\r\n                            buttonId = self._getButtonId(items[index].file),\r\n                            button = self._getButton(buttonId);\r\n\r\n                        self._handleCheckedCallback({\r\n                            name: \"onValidate\",\r\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\r\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\r\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\r\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\r\n                        });\r\n                    }, 0);\r\n                }\r\n                else if (!validItem) {\r\n                    for (; index < items.length; index++) {\r\n                        self._fileOrBlobRejected(items[index].id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        _onAllComplete: function(successful, failed) {\r\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\r\n\r\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\r\n\r\n            this._succeededSinceLastAllComplete = [];\r\n            this._failedSinceLastAllComplete = [];\r\n        },\r\n\r\n        /**\r\n         * Attempt to automatically retry a failed upload.\r\n         *\r\n         * @param id The file ID of the failed upload\r\n         * @param name The name of the file associated with the failed upload\r\n         * @param responseJSON Response from the server, parsed into a javascript object\r\n         * @param xhr Ajax transport used to send the failed request\r\n         * @param callback Optional callback to be invoked if a retry is prudent.\r\n         * Invoked in lieu of asking the upload handler to retry.\r\n         * @returns {boolean} true if an auto-retry will occur\r\n         * @private\r\n         */\r\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\r\n            var self = this;\r\n\r\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\r\n\r\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\r\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\r\n\r\n                self._maybeParseAndSendUploadError.apply(self, arguments);\r\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\r\n                self._onBeforeAutoRetry(id, name);\r\n\r\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\r\n                self._retryTimeouts[id] = setTimeout(function() {\r\n                    self.log(\"Starting retry for \" + name + \"...\");\r\n\r\n                    if (callback) {\r\n                        callback(id);\r\n                    }\r\n                    else {\r\n                        self._handler.retry(id);\r\n                    }\r\n                }, retryWaitPeriod);\r\n\r\n                return true;\r\n            }\r\n        },\r\n\r\n        _onBeforeAutoRetry: function(id, name) {\r\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\r\n        },\r\n\r\n        //return false if we should not attempt the requested retry\r\n        _onBeforeManualRetry: function(id) {\r\n            var itemLimit = this._currentItemLimit,\r\n                fileName;\r\n\r\n            if (this._preventRetries[id]) {\r\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\r\n                return false;\r\n            }\r\n            else if (this._handler.isValid(id)) {\r\n                fileName = this.getName(id);\r\n\r\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\r\n                    return false;\r\n                }\r\n\r\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\r\n                    this._itemError(\"retryFailTooManyItems\");\r\n                    return false;\r\n                }\r\n\r\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onCancel: function(id, name) {\r\n            this._netUploadedOrQueued--;\r\n\r\n            clearTimeout(this._retryTimeouts[id]);\r\n\r\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\r\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\r\n                this._storedIds.splice(storedItemIndex, 1);\r\n            }\r\n\r\n            this._uploadData.setStatus(id, qq.status.CANCELED);\r\n        },\r\n\r\n        _onComplete: function(id, name, result, xhr) {\r\n            if (!result.success) {\r\n                this._netUploadedOrQueued--;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\r\n\r\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\r\n                    this._preventRetries[id] = true;\r\n                }\r\n            }\r\n            else {\r\n                if (result.thumbnailUrl) {\r\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\r\n                }\r\n\r\n                this._netUploaded++;\r\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\r\n            }\r\n\r\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\r\n\r\n            return result.success ? true : false;\r\n        },\r\n\r\n        _onDelete: function(id) {\r\n            this._uploadData.setStatus(id, qq.status.DELETING);\r\n        },\r\n\r\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\r\n            var name = this.getName(id);\r\n\r\n            if (isError) {\r\n                this._handleDeleteFailed(id, xhrOrXdr);\r\n            }\r\n            else {\r\n                this._handleDeleteSuccess(id);\r\n            }\r\n        },\r\n\r\n        _onInputChange: function(input) {\r\n            var fileIndex;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\r\n                    this._annotateWithButtonId(input.files[fileIndex], input);\r\n                }\r\n\r\n                this.addFiles(input.files);\r\n            }\r\n            // Android 2.3.x will fire `onchange` even if no file has been selected\r\n            else if (input.value.length > 0) {\r\n                this.addFiles(input);\r\n            }\r\n\r\n            qq.each(this._buttons, function(idx, button) {\r\n                button.reset();\r\n            });\r\n        },\r\n\r\n        _onProgress: function(id, name, loaded, total) {\r\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\r\n        },\r\n\r\n        _onSubmit: function(id, name) {\r\n            //nothing to do yet in core uploader\r\n        },\r\n\r\n        _onSubmitCallbackSuccess: function(id, name) {\r\n            this._onSubmit.apply(this, arguments);\r\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\r\n            this._onSubmitted.apply(this, arguments);\r\n\r\n            if (this._options.autoUpload) {\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n                this._uploadFile(id);\r\n            }\r\n            else {\r\n                this._storeForLater(id);\r\n                this._options.callbacks.onSubmitted.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\r\n            var uuid = this.getUuid(id),\r\n                adjustedOnSuccessCallback;\r\n\r\n            if (onSuccessCallback) {\r\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\r\n            }\r\n\r\n            if (this._isDeletePossible()) {\r\n                this._handleCheckedCallback({\r\n                    name: \"onSubmitDelete\",\r\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\r\n                    onSuccess: adjustedOnSuccessCallback ||\r\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\r\n                    identifier: id\r\n                });\r\n                return true;\r\n            }\r\n            else {\r\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\r\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\r\n                return false;\r\n            }\r\n        },\r\n\r\n        _onSubmitted: function(id) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onTotalProgress: function(loaded, total) {\r\n            this._options.callbacks.onTotalProgress(loaded, total);\r\n        },\r\n\r\n        _onUploadPrep: function(id) {\r\n            // nothing to do in the core uploader for now\r\n        },\r\n\r\n        _onUpload: function(id, name) {\r\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\r\n        },\r\n\r\n        _onUploadChunk: function(id, chunkData) {\r\n            //nothing to do in the base uploader\r\n        },\r\n\r\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\r\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\r\n            if (newStatus === qq.status.PAUSED) {\r\n                clearTimeout(this._retryTimeouts[id]);\r\n            }\r\n        },\r\n\r\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\r\n            var self = this;\r\n\r\n            qq.each(fileWrappers, function(idx, fileWrapper) {\r\n                self._fileOrBlobRejected(fileWrapper.id);\r\n            });\r\n        },\r\n\r\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\r\n            var errorMessage,\r\n                itemLimit = this._currentItemLimit,\r\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\r\n\r\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\r\n                if (items.length > 0) {\r\n                    this._handleCheckedCallback({\r\n                        name: \"onValidate\",\r\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\r\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\r\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\r\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\r\n                    });\r\n                }\r\n                else {\r\n                    this._itemError(\"noFilesError\");\r\n                }\r\n            }\r\n            else {\r\n                this._onValidateBatchCallbackFailure(items);\r\n                errorMessage = this._options.messages.tooManyItemsError\r\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\r\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\r\n                this._batchError(errorMessage);\r\n            }\r\n        },\r\n\r\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\r\n            var nextIndex = index + 1;\r\n\r\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\r\n\r\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n        },\r\n\r\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\r\n            var self = this,\r\n                nextIndex = index + 1,\r\n                validationDescriptor = this._getValidationDescriptor(items[index]);\r\n\r\n            this._validateFileOrBlobData(items[index], validationDescriptor)\r\n                .then(\r\n                function() {\r\n                    self._upload(items[index].id, params, endpoint);\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\r\n                },\r\n                function() {\r\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\r\n                }\r\n            );\r\n        },\r\n\r\n        _prepareItemsForUpload: function(items, params, endpoint) {\r\n            if (items.length === 0) {\r\n                this._itemError(\"noFilesError\");\r\n                return;\r\n            }\r\n\r\n            var validationDescriptors = this._getValidationDescriptors(items),\r\n                buttonId = this._getButtonId(items[0].file),\r\n                button = this._getButton(buttonId);\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onValidateBatch\",\r\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\r\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\r\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\r\n                identifier: \"batch validation\"\r\n            });\r\n        },\r\n\r\n        _preventLeaveInProgress: function() {\r\n            var self = this;\r\n\r\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\r\n                if (self.getInProgress()) {\r\n                    e = e || window.event;\r\n                    // for ie, ff\r\n                    e.returnValue = self._options.messages.onLeave;\r\n                    // for webkit\r\n                    return self._options.messages.onLeave;\r\n                }\r\n            });\r\n        },\r\n\r\n        // Attempts to refresh session data only if the `qq.Session` module exists\r\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\r\n        // callback will be invoked once the refresh is complete.\r\n        _refreshSessionData: function() {\r\n            var self = this,\r\n                options = this._options.session;\r\n\r\n            /* jshint eqnull:true */\r\n            if (qq.Session && this._options.session.endpoint != null) {\r\n                if (!this._session) {\r\n                    qq.extend(options, {cors: this._options.cors});\r\n\r\n                    options.log = qq.bind(this.log, this);\r\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\r\n\r\n                    this._session = new qq.Session(options);\r\n                }\r\n\r\n                setTimeout(function() {\r\n                    self._session.refresh().then(function(response, xhrOrXdr) {\r\n                        self._sessionRequestComplete();\r\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\r\n\r\n                    }, function(response, xhrOrXdr) {\r\n\r\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\r\n                    });\r\n                }, 0);\r\n            }\r\n        },\r\n\r\n        _sessionRequestComplete: function() {},\r\n\r\n        _setSize: function(id, newSize) {\r\n            this._uploadData.updateSize(id, newSize);\r\n            this._totalProgress && this._totalProgress.onNewSize(id);\r\n        },\r\n\r\n        _shouldAutoRetry: function(id, name, responseJSON) {\r\n            var uploadData = this._uploadData.retrieve({id: id});\r\n\r\n            /*jshint laxbreak: true */\r\n            if (!this._preventRetries[id]\r\n                && this._options.retry.enableAuto\r\n                && uploadData.status !== qq.status.PAUSED) {\r\n\r\n                if (this._autoRetries[id] === undefined) {\r\n                    this._autoRetries[id] = 0;\r\n                }\r\n\r\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\r\n                    this._autoRetries[id] += 1;\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _storeForLater: function(id) {\r\n            this._storedIds.push(id);\r\n        },\r\n\r\n        // Maps a file with the button that was used to select it.\r\n        _trackButton: function(id) {\r\n            var buttonId;\r\n\r\n            if (qq.supportedFeatures.ajaxUploading) {\r\n                buttonId = this._handler.getFile(id).qqButtonId;\r\n            }\r\n            else {\r\n                buttonId = this._getButtonId(this._handler.getInput(id));\r\n            }\r\n\r\n            if (buttonId) {\r\n                this._buttonIdsForFileIds[id] = buttonId;\r\n            }\r\n        },\r\n\r\n        _updateFormSupportAndParams: function(formElementOrId) {\r\n            this._options.form.element = formElementOrId;\r\n\r\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\r\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\r\n                );\r\n\r\n            if (this._formSupport && this._formSupport.attachedToForm) {\r\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\r\n\r\n                this._options.autoUpload = this._formSupport.newAutoUpload;\r\n                if (this._formSupport.newEndpoint) {\r\n                    this.setEndpoint(this._formSupport.newEndpoint);\r\n                }\r\n            }\r\n        },\r\n\r\n        _upload: function(id, params, endpoint) {\r\n            var name = this.getName(id);\r\n\r\n            if (params) {\r\n                this.setParams(params, id);\r\n            }\r\n\r\n            if (endpoint) {\r\n                this.setEndpoint(endpoint, id);\r\n            }\r\n\r\n            this._handleCheckedCallback({\r\n                name: \"onSubmit\",\r\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\r\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\r\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\r\n                identifier: id\r\n            });\r\n        },\r\n\r\n        _uploadFile: function(id) {\r\n            if (!this._handler.upload(id)) {\r\n                this._uploadData.setStatus(id, qq.status.QUEUED);\r\n            }\r\n        },\r\n\r\n        _uploadStoredFiles: function() {\r\n            var idToUpload, stillSubmitting,\r\n                self = this;\r\n\r\n            while (this._storedIds.length) {\r\n                idToUpload = this._storedIds.shift();\r\n                this._uploadFile(idToUpload);\r\n            }\r\n\r\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\r\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\r\n            if (stillSubmitting) {\r\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\r\n                setTimeout(function() {\r\n                    self._uploadStoredFiles();\r\n                }, 1000);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Performs some internal validation checks on an item, defined in the `validation` option.\r\n         *\r\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\r\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\r\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\r\n         * @private\r\n         */\r\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\r\n            var self = this,\r\n                file = (function() {\r\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\r\n                        return fileWrapper.file.referenceBlob;\r\n                    }\r\n                    return fileWrapper.file;\r\n                }()),\r\n                name = validationDescriptor.name,\r\n                size = validationDescriptor.size,\r\n                buttonId = this._getButtonId(fileWrapper.file),\r\n                validationBase = this._getValidationBase(buttonId),\r\n                validityChecker = new qq.Promise();\r\n\r\n            validityChecker.then(\r\n                function() {},\r\n                function() {\r\n                    self._fileOrBlobRejected(fileWrapper.id, name);\r\n                });\r\n\r\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\r\n                this._itemError(\"typeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (!this._options.validation.allowEmpty && size === 0) {\r\n                this._itemError(\"emptyError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\r\n                this._itemError(\"sizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (size > 0 && size < validationBase.minSizeLimit) {\r\n                this._itemError(\"minSizeError\", name, file);\r\n                return validityChecker.failure();\r\n            }\r\n\r\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\r\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\r\n                    validityChecker.success,\r\n                    function(errorCode) {\r\n                        self._itemError(errorCode + \"ImageError\", name, file);\r\n                        validityChecker.failure();\r\n                    }\r\n                );\r\n            }\r\n            else {\r\n                validityChecker.success();\r\n            }\r\n\r\n            return validityChecker;\r\n        },\r\n\r\n        _wrapCallbacks: function() {\r\n            var self, safeCallback, prop;\r\n\r\n            self = this;\r\n\r\n            safeCallback = function(name, callback, args) {\r\n                var errorMsg;\r\n\r\n                try {\r\n                    return callback.apply(self, args);\r\n                }\r\n                catch (exception) {\r\n                    errorMsg = exception.message || exception.toString();\r\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\r\n                }\r\n            };\r\n\r\n            /* jshint forin: false, loopfunc: true */\r\n            for (prop in this._options.callbacks) {\r\n                (function() {\r\n                    var callbackName, callbackFunc;\r\n                    callbackName = prop;\r\n                    callbackFunc = self._options.callbacks[callbackName];\r\n                    self._options.callbacks[callbackName] = function() {\r\n                        return safeCallback(callbackName, callbackFunc, arguments);\r\n                    };\r\n                }());\r\n            }\r\n        }\r\n    };\r\n}());\r\n","/*globals qq*/\r\n(function() {\r\n    \"use strict\";\r\n\r\n    qq.FineUploaderBasic = function(o) {\r\n        var self = this;\r\n\r\n        // These options define FineUploaderBasic mode.\r\n        this._options = {\r\n            debug: false,\r\n            button: null,\r\n            multiple: true,\r\n            maxConnections: 3,\r\n            disableCancelForFormUploads: false,\r\n            autoUpload: true,\r\n\r\n            request: {\r\n                customHeaders: {},\r\n                endpoint: \"/server/upload\",\r\n                filenameParam: \"qqfilename\",\r\n                forceMultipart: true,\r\n                inputName: \"qqfile\",\r\n                method: \"POST\",\r\n                params: {},\r\n                paramsInBody: true,\r\n                totalFileSizeName: \"qqtotalfilesize\",\r\n                uuidName: \"qquuid\"\r\n            },\r\n\r\n            validation: {\r\n                allowedExtensions: [],\r\n                sizeLimit: 0,\r\n                minSizeLimit: 0,\r\n                itemLimit: 0,\r\n                stopOnFirstInvalidFile: true,\r\n                acceptFiles: null,\r\n                image: {\r\n                    maxHeight: 0,\r\n                    maxWidth: 0,\r\n                    minHeight: 0,\r\n                    minWidth: 0\r\n                },\r\n                allowEmpty: false\r\n            },\r\n\r\n            callbacks: {\r\n                onSubmit: function(id, name) {},\r\n                onSubmitted: function(id, name) {},\r\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\r\n                onAllComplete: function(successful, failed) {},\r\n                onCancel: function(id, name) {},\r\n                onUpload: function(id, name) {},\r\n                onUploadChunk: function(id, name, chunkData) {},\r\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\r\n                onResume: function(id, fileName, chunkData) {},\r\n                onProgress: function(id, name, loaded, total) {},\r\n                onTotalProgress: function(loaded, total) {},\r\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\r\n                onAutoRetry: function(id, name, attemptNumber) {},\r\n                onManualRetry: function(id, name) {},\r\n                onValidateBatch: function(fileOrBlobData) {},\r\n                onValidate: function(fileOrBlobData) {},\r\n                onSubmitDelete: function(id) {},\r\n                onDelete: function(id) {},\r\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\r\n                onPasteReceived: function(blob) {},\r\n                onStatusChange: function(id, oldStatus, newStatus) {},\r\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\r\n            },\r\n\r\n            messages: {\r\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\r\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\r\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\r\n                emptyError: \"{file} is empty, please select files again without it.\",\r\n                noFilesError: \"No files to upload.\",\r\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\r\n                maxHeightImageError: \"Image is too tall.\",\r\n                maxWidthImageError: \"Image is too wide.\",\r\n                minHeightImageError: \"Image is not tall enough.\",\r\n                minWidthImageError: \"Image is not wide enough.\",\r\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\r\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\r\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\r\n            },\r\n\r\n            retry: {\r\n                enableAuto: false,\r\n                maxAutoAttempts: 3,\r\n                autoAttemptDelay: 5,\r\n                preventRetryResponseProperty: \"preventRetry\"\r\n            },\r\n\r\n            classes: {\r\n                buttonHover: \"qq-upload-button-hover\",\r\n                buttonFocus: \"qq-upload-button-focus\"\r\n            },\r\n\r\n            chunking: {\r\n                enabled: false,\r\n                concurrent: {\r\n                    enabled: false\r\n                },\r\n                mandatory: false,\r\n                paramNames: {\r\n                    partIndex: \"qqpartindex\",\r\n                    partByteOffset: \"qqpartbyteoffset\",\r\n                    chunkSize: \"qqchunksize\",\r\n                    totalFileSize: \"qqtotalfilesize\",\r\n                    totalParts: \"qqtotalparts\"\r\n                },\r\n                partSize: 2000000,\r\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\r\n                success: {\r\n                    endpoint: null\r\n                }\r\n            },\r\n\r\n            resume: {\r\n                enabled: false,\r\n                recordsExpireIn: 7, //days\r\n                paramNames: {\r\n                    resuming: \"qqresume\"\r\n                }\r\n            },\r\n\r\n            formatFileName: function(fileOrBlobName) {\r\n                return fileOrBlobName;\r\n            },\r\n\r\n            text: {\r\n                defaultResponseError: \"Upload failure reason unknown\",\r\n                fileInputTitle: \"file input\",\r\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\r\n            },\r\n\r\n            deleteFile: {\r\n                enabled: false,\r\n                method: \"DELETE\",\r\n                endpoint: \"/server/upload\",\r\n                customHeaders: {},\r\n                params: {}\r\n            },\r\n\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false,\r\n                allowXdr: false\r\n            },\r\n\r\n            blobs: {\r\n                defaultName: \"misc_data\"\r\n            },\r\n\r\n            paste: {\r\n                targetElement: null,\r\n                defaultName: \"pasted_image\"\r\n            },\r\n\r\n            camera: {\r\n                ios: false,\r\n\r\n                // if ios is true: button is null means target the default button, otherwise target the button specified\r\n                button: null\r\n            },\r\n\r\n            // This refers to additional upload buttons to be handled by Fine Uploader.\r\n            // Each element is an object, containing `element` as the only required\r\n            // property.  The `element` must be a container that will ultimately\r\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\r\n            // Optional properties of each object include `multiple`, `validation`,\r\n            // and `folders`.\r\n            extraButtons: [],\r\n\r\n            // Depends on the session module.  Used to query the server for an initial file list\r\n            // during initialization and optionally after a `reset`.\r\n            session: {\r\n                endpoint: null,\r\n                params: {},\r\n                customHeaders: {},\r\n                refreshOnReset: true\r\n            },\r\n\r\n            // Send parameters associated with an existing form along with the files\r\n            form: {\r\n                // Element ID, HTMLElement, or null\r\n                element: \"qq-form\",\r\n\r\n                // Overrides the base `autoUpload`, unless `element` is null.\r\n                autoUpload: false,\r\n\r\n                // true = upload files on form submission (and squelch submit event)\r\n                interceptSubmit: true\r\n            },\r\n\r\n            // scale images client side, upload a new file for each scaled version\r\n            scaling: {\r\n                customResizer: null,\r\n\r\n                // send the original file as well\r\n                sendOriginal: true,\r\n\r\n                // fox orientation for scaled images\r\n                orient: true,\r\n\r\n                // If null, scaled image type will match reference image type.  This value will be referred to\r\n                // for any size record that does not specific a type.\r\n                defaultType: null,\r\n\r\n                defaultQuality: 80,\r\n\r\n                failureText: \"Failed to scale\",\r\n\r\n                includeExif: false,\r\n\r\n                // metadata about each requested scaled version\r\n                sizes: []\r\n            },\r\n\r\n            workarounds: {\r\n                iosEmptyVideos: true,\r\n                ios8SafariUploads: true,\r\n                ios8BrowserCrash: false\r\n            }\r\n        };\r\n\r\n        // Replace any default options with user defined ones\r\n        qq.extend(this._options, o, true);\r\n\r\n        this._buttons = [];\r\n        this._extraButtonSpecs = {};\r\n        this._buttonIdsForFileIds = [];\r\n\r\n        this._wrapCallbacks();\r\n        this._disposeSupport =  new qq.DisposeSupport();\r\n\r\n        this._storedIds = [];\r\n        this._autoRetries = [];\r\n        this._retryTimeouts = [];\r\n        this._preventRetries = [];\r\n        this._thumbnailUrls = [];\r\n\r\n        this._netUploadedOrQueued = 0;\r\n        this._netUploaded = 0;\r\n        this._uploadData = this._createUploadDataTracker();\r\n\r\n        this._initFormSupportAndParams();\r\n\r\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\r\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\r\n\r\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\r\n\r\n        this._endpointStore = this._createStore(this._options.request.endpoint);\r\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\r\n\r\n        this._handler = this._createUploadHandler();\r\n\r\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\r\n\r\n        if (this._options.button) {\r\n            this._defaultButtonId = this._createUploadButton({\r\n                element: this._options.button,\r\n                title: this._options.text.fileInputTitle\r\n            }).getButtonId();\r\n        }\r\n\r\n        this._generateExtraButtonSpecs();\r\n\r\n        this._handleCameraAccess();\r\n\r\n        if (this._options.paste.targetElement) {\r\n            if (qq.PasteSupport) {\r\n                this._pasteHandler = this._createPasteHandler();\r\n            }\r\n            else {\r\n                this.log(\"Paste support module not found\", \"error\");\r\n            }\r\n        }\r\n\r\n        this._preventLeaveInProgress();\r\n\r\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\r\n        this._refreshSessionData();\r\n\r\n        this._succeededSinceLastAllComplete = [];\r\n        this._failedSinceLastAllComplete = [];\r\n\r\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\r\n        if (this._scaler.enabled) {\r\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\r\n        }\r\n\r\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\r\n            this._totalProgress = new qq.TotalProgress(\r\n                qq.bind(this._onTotalProgress, this),\r\n\r\n                function(id) {\r\n                    var entry = self._uploadData.retrieve({id: id});\r\n                    return (entry && entry.size) || 0;\r\n                }\r\n            );\r\n        }\r\n\r\n        this._currentItemLimit = this._options.validation.itemLimit;\r\n    };\r\n\r\n    // Define the private & public API methods.\r\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\r\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\r\n}());\r\n","/*globals qq, XDomainRequest*/\r\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\r\nqq.AjaxRequester = function(o) {\r\n    \"use strict\";\r\n\r\n    var log, shouldParamsBeInQueryString,\r\n        queue = [],\r\n        requestData = {},\r\n        options = {\r\n            acceptHeader: null,\r\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\r\n            method: \"POST\",\r\n            contentType: \"application/x-www-form-urlencoded\",\r\n            maxConnections: 3,\r\n            customHeaders: {},\r\n            endpointStore: {},\r\n            paramsStore: {},\r\n            mandatedParams: {},\r\n            allowXRequestedWithAndCacheControl: true,\r\n            successfulResponseCodes: {\r\n                DELETE: [200, 202, 204],\r\n                PATCH: [200, 201, 202, 203, 204],\r\n                POST: [200, 201, 202, 203, 204],\r\n                PUT: [200, 201, 202, 203, 204],\r\n                GET: [200]\r\n            },\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {},\r\n            onSend: function(id) {},\r\n            onComplete: function(id, xhrOrXdr, isError) {},\r\n            onProgress: null\r\n        };\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n\r\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\r\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\r\n    }\r\n\r\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\r\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\r\n    // make a CORS request eligible to be exempt from preflighting.\r\n    function isSimpleMethod() {\r\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\r\n    }\r\n\r\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\r\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\r\n    // make a CORS request eligible to be exempt from preflighting.\r\n    function containsNonSimpleHeaders(headers) {\r\n        var containsNonSimple = false;\r\n\r\n        qq.each(containsNonSimple, function(idx, header) {\r\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\r\n                containsNonSimple = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return containsNonSimple;\r\n    }\r\n\r\n    function isXdr(xhr) {\r\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\r\n        return options.cors.expected && xhr.withCredentials === undefined;\r\n    }\r\n\r\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\r\n    function getCorsAjaxTransport() {\r\n        var xhrOrXdr;\r\n\r\n        if (window.XMLHttpRequest || window.ActiveXObject) {\r\n            xhrOrXdr = qq.createXhrInstance();\r\n\r\n            if (xhrOrXdr.withCredentials === undefined) {\r\n                xhrOrXdr = new XDomainRequest();\r\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\r\n                xhrOrXdr.onload = function() {};\r\n                xhrOrXdr.onerror = function() {};\r\n                xhrOrXdr.ontimeout = function() {};\r\n                xhrOrXdr.onprogress = function() {};\r\n            }\r\n        }\r\n\r\n        return xhrOrXdr;\r\n    }\r\n\r\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\r\n    function getXhrOrXdr(id, suppliedXhr) {\r\n        var xhrOrXdr = requestData[id].xhr;\r\n\r\n        if (!xhrOrXdr) {\r\n            if (suppliedXhr) {\r\n                xhrOrXdr = suppliedXhr;\r\n            }\r\n            else {\r\n                if (options.cors.expected) {\r\n                    xhrOrXdr = getCorsAjaxTransport();\r\n                }\r\n                else {\r\n                    xhrOrXdr = qq.createXhrInstance();\r\n                }\r\n            }\r\n\r\n            requestData[id].xhr = xhrOrXdr;\r\n        }\r\n\r\n        return xhrOrXdr;\r\n    }\r\n\r\n    // Removes element from queue, sends next request\r\n    function dequeue(id) {\r\n        var i = qq.indexOf(queue, id),\r\n            max = options.maxConnections,\r\n            nextId;\r\n\r\n        delete requestData[id];\r\n        queue.splice(i, 1);\r\n\r\n        if (queue.length >= max && i < max) {\r\n            nextId = queue[max - 1];\r\n            sendRequest(nextId);\r\n        }\r\n    }\r\n\r\n    function onComplete(id, xdrError) {\r\n        var xhr = getXhrOrXdr(id),\r\n            method = options.method,\r\n            isError = xdrError === true;\r\n\r\n        dequeue(id);\r\n\r\n        if (isError) {\r\n            log(method + \" request for \" + id + \" has failed\", \"error\");\r\n        }\r\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\r\n            isError = true;\r\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\r\n        }\r\n\r\n        options.onComplete(id, xhr, isError);\r\n    }\r\n\r\n    function getParams(id) {\r\n        var onDemandParams = requestData[id].additionalParams,\r\n            mandatedParams = options.mandatedParams,\r\n            params;\r\n\r\n        if (options.paramsStore.get) {\r\n            params = options.paramsStore.get(id);\r\n        }\r\n\r\n        if (onDemandParams) {\r\n            qq.each(onDemandParams, function(name, val) {\r\n                params = params || {};\r\n                params[name] = val;\r\n            });\r\n        }\r\n\r\n        if (mandatedParams) {\r\n            qq.each(mandatedParams, function(name, val) {\r\n                params = params || {};\r\n                params[name] = val;\r\n            });\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    function sendRequest(id, optXhr) {\r\n        var xhr = getXhrOrXdr(id, optXhr),\r\n            method = options.method,\r\n            params = getParams(id),\r\n            payload = requestData[id].payload,\r\n            url;\r\n\r\n        options.onSend(id);\r\n\r\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\r\n\r\n        // XDR and XHR status detection APIs differ a bit.\r\n        if (isXdr(xhr)) {\r\n            xhr.onload = getXdrLoadHandler(id);\r\n            xhr.onerror = getXdrErrorHandler(id);\r\n        }\r\n        else {\r\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\r\n        }\r\n\r\n        registerForUploadProgress(id);\r\n\r\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\r\n        xhr.open(method, url, true);\r\n\r\n        // Instruct the transport to send cookies along with the CORS request,\r\n        // unless we are using `XDomainRequest`, which is not capable of this.\r\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\r\n            xhr.withCredentials = true;\r\n        }\r\n\r\n        setHeaders(id);\r\n\r\n        log(\"Sending \" + method + \" request for \" + id);\r\n\r\n        if (payload) {\r\n            xhr.send(payload);\r\n        }\r\n        else if (shouldParamsBeInQueryString || !params) {\r\n            xhr.send();\r\n        }\r\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\r\n            xhr.send(qq.obj2url(params, \"\"));\r\n        }\r\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\r\n            xhr.send(JSON.stringify(params));\r\n        }\r\n        else {\r\n            xhr.send(params);\r\n        }\r\n\r\n        return xhr;\r\n    }\r\n\r\n    function createUrl(id, params, additionalQueryParams) {\r\n        var endpoint = options.endpointStore.get(id),\r\n            addToPath = requestData[id].addToPath;\r\n\r\n        /*jshint -W116,-W041 */\r\n        if (addToPath != undefined) {\r\n            endpoint += \"/\" + addToPath;\r\n        }\r\n\r\n        if (shouldParamsBeInQueryString && params) {\r\n            endpoint = qq.obj2url(params, endpoint);\r\n        }\r\n\r\n        if (additionalQueryParams) {\r\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\r\n        }\r\n\r\n        return endpoint;\r\n    }\r\n\r\n    // Invoked by the UA to indicate a number of possible states that describe\r\n    // a live `XMLHttpRequest` transport.\r\n    function getXhrReadyStateChangeHandler(id) {\r\n        return function() {\r\n            if (getXhrOrXdr(id).readyState === 4) {\r\n                onComplete(id);\r\n            }\r\n        };\r\n    }\r\n\r\n    function registerForUploadProgress(id) {\r\n        var onProgress = options.onProgress;\r\n\r\n        if (onProgress) {\r\n            getXhrOrXdr(id).upload.onprogress = function(e) {\r\n                if (e.lengthComputable) {\r\n                    onProgress(id, e.loaded, e.total);\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n    // This will be called by IE to indicate **success** for an associated\r\n    // `XDomainRequest` transported request.\r\n    function getXdrLoadHandler(id) {\r\n        return function() {\r\n            onComplete(id);\r\n        };\r\n    }\r\n\r\n    // This will be called by IE to indicate **failure** for an associated\r\n    // `XDomainRequest` transported request.\r\n    function getXdrErrorHandler(id) {\r\n        return function() {\r\n            onComplete(id, true);\r\n        };\r\n    }\r\n\r\n    function setHeaders(id) {\r\n        var xhr = getXhrOrXdr(id),\r\n            customHeaders = options.customHeaders,\r\n            onDemandHeaders = requestData[id].additionalHeaders || {},\r\n            method = options.method,\r\n            allHeaders = {};\r\n\r\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\r\n        if (!isXdr(xhr)) {\r\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\r\n\r\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\r\n            if (options.allowXRequestedWithAndCacheControl) {\r\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\r\n                // OR the cross-origin request contains a non-simple method or header.\r\n                // This is done to ensure a preflight is not triggered exclusively based on the\r\n                // addition of these 2 non-simple headers.\r\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\r\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n                }\r\n            }\r\n\r\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\r\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\r\n            }\r\n\r\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\r\n            qq.extend(allHeaders, onDemandHeaders);\r\n\r\n            qq.each(allHeaders, function(name, val) {\r\n                xhr.setRequestHeader(name, val);\r\n            });\r\n        }\r\n    }\r\n\r\n    function isResponseSuccessful(responseCode) {\r\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\r\n    }\r\n\r\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\r\n        requestData[id] = {\r\n            addToPath: addToPath,\r\n            additionalParams: additionalParams,\r\n            additionalQueryParams: additionalQueryParams,\r\n            additionalHeaders: additionalHeaders,\r\n            payload: payload\r\n        };\r\n\r\n        var len = queue.push(id);\r\n\r\n        // if too many active connections, wait...\r\n        if (len <= options.maxConnections) {\r\n            return sendRequest(id, optXhr);\r\n        }\r\n    }\r\n\r\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\r\n\r\n    qq.extend(this, {\r\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\r\n        initTransport: function(id) {\r\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\r\n\r\n            return {\r\n                // Optionally specify the end of the endpoint path for the request.\r\n                withPath: function(appendToPath) {\r\n                    path = appendToPath;\r\n                    return this;\r\n                },\r\n\r\n                // Optionally specify additional parameters to send along with the request.\r\n                // These will be added to the query string for GET/DELETE requests or the payload\r\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\r\n                // how these parameters should be formatted as well.\r\n                withParams: function(additionalParams) {\r\n                    params = additionalParams;\r\n                    return this;\r\n                },\r\n\r\n                withQueryParams: function(_additionalQueryParams_) {\r\n                    additionalQueryParams = _additionalQueryParams_;\r\n                    return this;\r\n                },\r\n\r\n                // Optionally specify additional headers to send along with the request.\r\n                withHeaders: function(additionalHeaders) {\r\n                    headers = additionalHeaders;\r\n                    return this;\r\n                },\r\n\r\n                // Optionally specify a payload/body for the request.\r\n                withPayload: function(thePayload) {\r\n                    payload = thePayload;\r\n                    return this;\r\n                },\r\n\r\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\r\n                withCacheBuster: function() {\r\n                    cacheBuster = true;\r\n                    return this;\r\n                },\r\n\r\n                // Send the constructed request.\r\n                send: function(optXhr) {\r\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\r\n                        params.qqtimestamp = new Date().getTime();\r\n                    }\r\n\r\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\r\n                }\r\n            };\r\n        },\r\n\r\n        canceled: function(id) {\r\n            dequeue(id);\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Common upload handler functions.\r\n *\r\n * @constructor\r\n */\r\nqq.UploadHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    var proxy = spec.proxy,\r\n        fileState = {},\r\n        onCancel = proxy.onCancel,\r\n        getName = proxy.getName;\r\n\r\n    qq.extend(this, {\r\n        add: function(id, fileItem) {\r\n            fileState[id] = fileItem;\r\n            fileState[id].temp = {};\r\n        },\r\n\r\n        cancel: function(id) {\r\n            var self = this,\r\n                cancelFinalizationEffort = new qq.Promise(),\r\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\r\n\r\n            onCancelRetVal.then(function() {\r\n                if (self.isValid(id)) {\r\n                    fileState[id].canceled = true;\r\n                    self.expunge(id);\r\n                }\r\n                cancelFinalizationEffort.success();\r\n            });\r\n        },\r\n\r\n        expunge: function(id) {\r\n            delete fileState[id];\r\n        },\r\n\r\n        getThirdPartyFileId: function(id) {\r\n            return fileState[id].key;\r\n        },\r\n\r\n        isValid: function(id) {\r\n            return fileState[id] !== undefined;\r\n        },\r\n\r\n        reset: function() {\r\n            fileState = {};\r\n        },\r\n\r\n        _getFileState: function(id) {\r\n            return fileState[id];\r\n        },\r\n\r\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\r\n            fileState[id].key = thirdPartyFileId;\r\n        },\r\n\r\n        _wasCanceled: function(id) {\r\n            return !!fileState[id].canceled;\r\n        }\r\n    });\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Base upload handler module.  Controls more specific handlers.\r\n *\r\n * @param o Options.  Passed along to the specific handler submodule as well.\r\n * @param namespace [optional] Namespace for the specific handler.\r\n */\r\nqq.UploadHandlerController = function(o, namespace) {\r\n    \"use strict\";\r\n\r\n    var controller = this,\r\n        chunkingPossible = false,\r\n        concurrentChunkingPossible = false,\r\n        chunking, preventRetryResponse, log, handler,\r\n\r\n    options = {\r\n        paramsStore: {},\r\n        maxConnections: 3, // maximum number of concurrent uploads\r\n        chunking: {\r\n            enabled: false,\r\n            multiple: {\r\n                enabled: false\r\n            }\r\n        },\r\n        log: function(str, level) {},\r\n        onProgress: function(id, fileName, loaded, total) {},\r\n        onComplete: function(id, fileName, response, xhr) {},\r\n        onCancel: function(id, fileName) {},\r\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\r\n        onUpload: function(id, fileName) {},\r\n        onUploadChunk: function(id, fileName, chunkData) {},\r\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\r\n        onAutoRetry: function(id, fileName, response, xhr) {},\r\n        onResume: function(id, fileName, chunkData) {},\r\n        onUuidChanged: function(id, newUuid) {},\r\n        getName: function(id) {},\r\n        setSize: function(id, newSize) {},\r\n        isQueued: function(id) {},\r\n        getIdsInProxyGroup: function(id) {},\r\n        getIdsInBatch: function(id) {}\r\n    },\r\n\r\n    chunked = {\r\n        // Called when each chunk has uploaded successfully\r\n        done: function(id, chunkIdx, response, xhr) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx);\r\n\r\n            handler._getFileState(id).attemptingResume = false;\r\n\r\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\r\n            handler._getFileState(id).loaded += chunkData.size;\r\n\r\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\r\n        // logic associated with closing out the file, such as combining the chunks.\r\n        finalize: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id);\r\n\r\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\r\n            handler.finalizeChunks(id).then(\r\n                function(response, xhr) {\r\n                    log(\"Finalize successful for \" + id);\r\n\r\n                    var normaizedResponse = upload.normalizeResponse(response, true);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    handler._maybeDeletePersistedChunkData(id);\r\n                    upload.cleanup(id, normaizedResponse, xhr);\r\n                },\r\n                function(response, xhr) {\r\n                    var normaizedResponse = upload.normalizeResponse(response, false);\r\n\r\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\r\n\r\n                    if (normaizedResponse.reset) {\r\n                        chunked.reset(id);\r\n                    }\r\n\r\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\r\n                        upload.cleanup(id, normaizedResponse, xhr);\r\n                    }\r\n                }\r\n            );\r\n        },\r\n\r\n        handleFailure: function(chunkIdx, id, response, xhr) {\r\n            var name = options.getName(id);\r\n\r\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\r\n\r\n            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n            var responseToReport = upload.normalizeResponse(response, false),\r\n                inProgressIdx;\r\n\r\n            if (responseToReport.reset) {\r\n                chunked.reset(id);\r\n            }\r\n            else {\r\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\r\n                if (inProgressIdx >= 0) {\r\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\r\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\r\n                }\r\n            }\r\n\r\n            // We may have aborted all other in-progress chunks for this file due to a failure.\r\n            // If so, ignore the failures associated with those aborts.\r\n            if (!handler._getFileState(id).temp.ignoreFailure) {\r\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\r\n                // chunks since they will be explicitly aborted\r\n                if (concurrentChunkingPossible) {\r\n                    handler._getFileState(id).temp.ignoreFailure = true;\r\n\r\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\r\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\r\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\r\n                        ckXhr.abort();\r\n                        // Flag the transport, in case we are waiting for some other async operation\r\n                        // to complete before attempting to upload the chunk\r\n                        ckXhr._cancelled = true;\r\n                    });\r\n\r\n                    // We must indicate that all aborted chunks are no longer in progress\r\n                    handler.moveInProgressToRemaining(id);\r\n\r\n                    // Free up any connections used by these chunks, but don't allow any\r\n                    // other files to take up the connections (until we have exhausted all auto-retries)\r\n                    connectionManager.free(id, true);\r\n                }\r\n\r\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\r\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\r\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\r\n                    // is a failure or not.\r\n                    upload.cleanup(id, responseToReport, xhr);\r\n                }\r\n            }\r\n        },\r\n\r\n        hasMoreParts: function(id) {\r\n            return !!handler._getFileState(id).chunking.remaining.length;\r\n        },\r\n\r\n        nextPart: function(id) {\r\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\r\n\r\n            if (nextIdx >= handler._getTotalChunks(id)) {\r\n                nextIdx = null;\r\n            }\r\n\r\n            return nextIdx;\r\n        },\r\n\r\n        reset: function(id) {\r\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\r\n\r\n            handler._maybeDeletePersistedChunkData(id);\r\n            handler.reevaluateChunking(id);\r\n            handler._getFileState(id).loaded = 0;\r\n        },\r\n\r\n        sendNext: function(id) {\r\n            var size = options.getSize(id),\r\n                name = options.getName(id),\r\n                chunkIdx = chunked.nextPart(id),\r\n                chunkData = handler._getChunkData(id, chunkIdx),\r\n                resuming = handler._getFileState(id).attemptingResume,\r\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\r\n\r\n            if (handler._getFileState(id).loaded == null) {\r\n                handler._getFileState(id).loaded = 0;\r\n            }\r\n\r\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\r\n            if (resuming && options.onResume(id, name, chunkData) === false) {\r\n                chunked.reset(id);\r\n                chunkIdx = chunked.nextPart(id);\r\n                chunkData = handler._getChunkData(id, chunkIdx);\r\n                resuming = false;\r\n            }\r\n\r\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\r\n            if (chunkIdx == null && inProgressChunks.length === 0) {\r\n                chunked.finalize(id);\r\n            }\r\n\r\n            // Send the next chunk\r\n            else {\r\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\r\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\r\n                inProgressChunks.push(chunkIdx);\r\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\r\n\r\n                if (concurrentChunkingPossible) {\r\n                    connectionManager.open(id, chunkIdx);\r\n                }\r\n\r\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\r\n                    chunked.sendNext(id);\r\n                }\r\n\r\n                if (chunkData.blob.size === 0) {\r\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\r\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\r\n                }\r\n                else {\r\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\r\n                        // upload chunk success\r\n                        function success(response, xhr) {\r\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\r\n\r\n                            handler.clearCachedChunk(id, chunkIdx);\r\n\r\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\r\n                                responseToReport = upload.normalizeResponse(response, true),\r\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\r\n\r\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\r\n\r\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\r\n\r\n                            if (inProgressChunkIdx >= 0) {\r\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\r\n                            }\r\n\r\n                            handler._maybePersistChunkedState(id);\r\n\r\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\r\n                                chunked.finalize(id);\r\n                            }\r\n                            else if (chunked.hasMoreParts(id)) {\r\n                                chunked.sendNext(id);\r\n                            }\r\n                            else {\r\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\r\n                            }\r\n                        },\r\n\r\n                        // upload chunk failure\r\n                        function failure(response, xhr) {\r\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\r\n                        }\r\n                        )\r\n                        .done(function() {\r\n                            handler.clearXhr(id, chunkIdx);\r\n                        });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    connectionManager = {\r\n        _open: [],\r\n        _openChunks: {},\r\n        _waiting: [],\r\n\r\n        available: function() {\r\n            var max = options.maxConnections,\r\n                openChunkEntriesCount = 0,\r\n                openChunksCount = 0;\r\n\r\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\r\n                openChunkEntriesCount++;\r\n                openChunksCount += openChunkIndexes.length;\r\n            });\r\n\r\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\r\n        },\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        free: function(id, dontAllowNext) {\r\n            var allowNext = !dontAllowNext,\r\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\r\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\r\n                nextId;\r\n\r\n            delete connectionManager._openChunks[id];\r\n\r\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\r\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\r\n                delete handler._getFileState(id).file;\r\n            }\r\n\r\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\r\n            if (waitingIndex >= 0) {\r\n                connectionManager._waiting.splice(waitingIndex, 1);\r\n            }\r\n            // If this file was consuming a connection, allow the next file to be uploaded\r\n            else if (allowNext && connectionsIndex >= 0) {\r\n                connectionManager._open.splice(connectionsIndex, 1);\r\n\r\n                nextId = connectionManager._waiting.shift();\r\n                if (nextId >= 0) {\r\n                    connectionManager._open.push(nextId);\r\n                    upload.start(nextId);\r\n                }\r\n            }\r\n        },\r\n\r\n        getWaitingOrConnected: function() {\r\n            var waitingOrConnected = [];\r\n\r\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\r\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\r\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\r\n                if (chunks && chunks.length) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // For non-chunked files, only one connection will be consumed per file.\r\n            // This is where we aggregate those file IDs.\r\n            qq.each(connectionManager._open, function(idx, fileId) {\r\n                if (!connectionManager._openChunks[fileId]) {\r\n                    waitingOrConnected.push(parseInt(fileId));\r\n                }\r\n            });\r\n\r\n            // There may be files waiting for a connection.\r\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\r\n\r\n            return waitingOrConnected;\r\n        },\r\n\r\n        isUsingConnection: function(id) {\r\n            return qq.indexOf(connectionManager._open, id) >= 0;\r\n        },\r\n\r\n        open: function(id, chunkIdx) {\r\n            if (chunkIdx == null) {\r\n                connectionManager._waiting.push(id);\r\n            }\r\n\r\n            if (connectionManager.available()) {\r\n                if (chunkIdx == null) {\r\n                    connectionManager._waiting.pop();\r\n                    connectionManager._open.push(id);\r\n                }\r\n                else {\r\n                    (function() {\r\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\r\n                        openChunksEntry.push(chunkIdx);\r\n                        connectionManager._openChunks[id] = openChunksEntry;\r\n                    }());\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        reset: function() {\r\n            connectionManager._waiting = [];\r\n            connectionManager._open = [];\r\n        }\r\n    },\r\n\r\n    simple = {\r\n        send: function(id, name) {\r\n            handler._getFileState(id).loaded = 0;\r\n\r\n            log(\"Sending simple upload request for \" + id);\r\n            handler.uploadFile(id).then(\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request succeeded for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, true),\r\n                        size = options.getSize(id);\r\n\r\n                    options.onProgress(id, name, size, size);\r\n                    upload.maybeNewUuid(id, responseToReport);\r\n                    upload.cleanup(id, responseToReport, optXhr);\r\n                },\r\n\r\n                function(response, optXhr) {\r\n                    log(\"Simple upload request failed for \" + id);\r\n\r\n                    var responseToReport = upload.normalizeResponse(response, false);\r\n\r\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\r\n                        upload.cleanup(id, responseToReport, optXhr);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    },\r\n\r\n    upload = {\r\n        cancel: function(id) {\r\n            log(\"Cancelling \" + id);\r\n            options.paramsStore.remove(id);\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        cleanup: function(id, response, optXhr) {\r\n            var name = options.getName(id);\r\n\r\n            options.onComplete(id, name, response, optXhr);\r\n\r\n            if (handler._getFileState(id)) {\r\n                handler._clearXhrs && handler._clearXhrs(id);\r\n            }\r\n\r\n            connectionManager.free(id);\r\n        },\r\n\r\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\r\n        // if none of these are available for the ID\r\n        getProxyOrBlob: function(id) {\r\n            return (handler.getProxy && handler.getProxy(id)) ||\r\n                (handler.getFile && handler.getFile(id));\r\n        },\r\n\r\n        initHandler: function() {\r\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\r\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\r\n\r\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\r\n                options,\r\n                {\r\n                    getDataByUuid: options.getDataByUuid,\r\n                    getName: options.getName,\r\n                    getSize: options.getSize,\r\n                    getUuid: options.getUuid,\r\n                    log: log,\r\n                    onCancel: options.onCancel,\r\n                    onProgress: options.onProgress,\r\n                    onUuidChanged: options.onUuidChanged\r\n                }\r\n            );\r\n\r\n            if (handler._removeExpiredChunkingRecords) {\r\n                handler._removeExpiredChunkingRecords();\r\n            }\r\n        },\r\n\r\n        isDeferredEligibleForUpload: function(id) {\r\n            return options.isQueued(id);\r\n        },\r\n\r\n        // For Blobs that are part of a group of generated images, along with a reference image,\r\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\r\n        // even if some async processing must be completed on one or more Blobs first.\r\n        maybeDefer: function(id, blob) {\r\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\r\n            // and then submit the upload to the specific handler once the blob is available.\r\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\r\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\r\n\r\n                // Blob creation may take some time, so the caller may want to update the\r\n                // UI to indicate that an operation is in progress, even before the actual\r\n                // upload begins and an onUpload callback is invoked.\r\n                options.onUploadPrep(id);\r\n\r\n                log(\"Attempting to generate a blob on-demand for \" + id);\r\n                blob.create().then(function(generatedBlob) {\r\n                    log(\"Generated an on-demand blob for \" + id);\r\n\r\n                    // Update record associated with this file by providing the generated Blob\r\n                    handler.updateBlob(id, generatedBlob);\r\n\r\n                    // Propagate the size for this generated Blob\r\n                    options.setSize(id, generatedBlob.size);\r\n\r\n                    // Order handler to recalculate chunking possibility, if applicable\r\n                    handler.reevaluateChunking(id);\r\n\r\n                    upload.maybeSendDeferredFiles(id);\r\n                },\r\n\r\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\r\n                function(errorMessage) {\r\n                    var errorResponse = {};\r\n\r\n                    if (errorMessage) {\r\n                        errorResponse.error = errorMessage;\r\n                    }\r\n\r\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\r\n\r\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\r\n                    upload.maybeSendDeferredFiles(id);\r\n                    connectionManager.free(id);\r\n                });\r\n            }\r\n            else {\r\n                return upload.maybeSendDeferredFiles(id);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\r\n        maybeSendDeferredFiles: function(id) {\r\n            var idsInGroup = options.getIdsInProxyGroup(id),\r\n                uploadedThisId = false;\r\n\r\n            if (idsInGroup && idsInGroup.length) {\r\n                log(\"Maybe ready to upload proxy group file \" + id);\r\n\r\n                qq.each(idsInGroup, function(idx, idInGroup) {\r\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\r\n                        uploadedThisId = idInGroup === id;\r\n                        upload.now(idInGroup);\r\n                    }\r\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                uploadedThisId = true;\r\n                upload.now(id);\r\n            }\r\n\r\n            return uploadedThisId;\r\n        },\r\n\r\n        maybeNewUuid: function(id, response) {\r\n            if (response.newUuid !== undefined) {\r\n                options.onUuidChanged(id, response.newUuid);\r\n            }\r\n        },\r\n\r\n        // The response coming from handler implementations may be in various formats.\r\n        // Instead of hoping a promise nested 5 levels deep will always return an object\r\n        // as its first param, let's just normalize the response here.\r\n        normalizeResponse: function(originalResponse, successful) {\r\n            var response = originalResponse;\r\n\r\n            // The passed \"response\" param may not be a response at all.\r\n            // It could be a string, detailing the error, for example.\r\n            if (!qq.isObject(originalResponse)) {\r\n                response = {};\r\n\r\n                if (qq.isString(originalResponse) && !successful) {\r\n                    response.error = originalResponse;\r\n                }\r\n            }\r\n\r\n            response.success = successful;\r\n\r\n            return response;\r\n        },\r\n\r\n        now: function(id) {\r\n            var name = options.getName(id);\r\n\r\n            if (!controller.isValid(id)) {\r\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\r\n            }\r\n\r\n            options.onUpload(id, name);\r\n\r\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\r\n                chunked.sendNext(id);\r\n            }\r\n            else {\r\n                simple.send(id, name);\r\n            }\r\n        },\r\n\r\n        start: function(id) {\r\n            var blobToUpload = upload.getProxyOrBlob(id);\r\n\r\n            if (blobToUpload) {\r\n                return upload.maybeDefer(id, blobToUpload);\r\n            }\r\n            else {\r\n                upload.now(id);\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Adds file or file input to the queue\r\n         **/\r\n        add: function(id, file) {\r\n            handler.add.apply(this, arguments);\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id\r\n         */\r\n        upload: function(id) {\r\n            if (connectionManager.open(id)) {\r\n                return upload.start(id);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        retry: function(id) {\r\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\r\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\r\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\r\n            // any more failures at this point.\r\n            if (concurrentChunkingPossible) {\r\n                handler._getFileState(id).temp.ignoreFailure = false;\r\n            }\r\n\r\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\r\n            // Just go ahead and ask the handler to upload again.\r\n            if (connectionManager.isUsingConnection(id)) {\r\n                return upload.start(id);\r\n            }\r\n\r\n            // If we are attempting to retry a file that is not currently consuming a connection,\r\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\r\n            // before the retry commences.\r\n            else {\r\n                return controller.upload(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id) {\r\n            var cancelRetVal = handler.cancel(id);\r\n\r\n            if (qq.isGenericPromise(cancelRetVal)) {\r\n                cancelRetVal.then(function() {\r\n                    upload.cancel(id);\r\n                });\r\n            }\r\n            else if (cancelRetVal !== false) {\r\n                upload.cancel(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels all queued or in-progress uploads\r\n         */\r\n        cancelAll: function() {\r\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\r\n                i;\r\n\r\n            // ensure files are cancelled in reverse order which they were added\r\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\r\n            if (waitingOrConnected.length) {\r\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\r\n                    controller.cancel(waitingOrConnected[i]);\r\n                }\r\n            }\r\n\r\n            connectionManager.reset();\r\n        },\r\n\r\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\r\n        // Undefined if no file record is available.\r\n        getFile: function(id) {\r\n            if (handler.getProxy && handler.getProxy(id)) {\r\n                return handler.getProxy(id).referenceBlob;\r\n            }\r\n\r\n            return handler.getFile && handler.getFile(id);\r\n        },\r\n\r\n        // Returns true if the Blob associated with the ID is related to a proxy s\r\n        isProxied: function(id) {\r\n            return !!(handler.getProxy && handler.getProxy(id));\r\n        },\r\n\r\n        getInput: function(id) {\r\n            if (handler.getInput) {\r\n                return handler.getInput(id);\r\n            }\r\n        },\r\n\r\n        reset: function() {\r\n            log(\"Resetting upload handler\");\r\n            controller.cancelAll();\r\n            connectionManager.reset();\r\n            handler.reset();\r\n        },\r\n\r\n        expunge: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.expunge(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Determine if the file exists.\r\n         */\r\n        isValid: function(id) {\r\n            return handler.isValid(id);\r\n        },\r\n\r\n        getResumableFilesData: function() {\r\n            if (handler.getResumableFilesData) {\r\n                return handler.getResumableFilesData();\r\n            }\r\n            return [];\r\n        },\r\n\r\n        /**\r\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\r\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\r\n         * will be undefined.\r\n         *\r\n         * @param id Internal file ID\r\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\r\n         */\r\n        getThirdPartyFileId: function(id) {\r\n            if (controller.isValid(id)) {\r\n                return handler.getThirdPartyFileId(id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\r\n         * @param id ID of the upload/file to pause\r\n         * @returns {boolean} true if the upload was paused\r\n         */\r\n        pause: function(id) {\r\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\r\n                connectionManager.free(id);\r\n                handler.moveInProgressToRemaining(id);\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // True if the file is eligible for pause/resume.\r\n        isResumable: function(id) {\r\n            return !!handler.isResumable && handler.isResumable(id);\r\n        }\r\n    });\r\n\r\n    qq.extend(options, o);\r\n    log = options.log;\r\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\r\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\r\n\r\n    preventRetryResponse = (function() {\r\n        var response = {};\r\n\r\n        response[options.preventRetryParam] = true;\r\n\r\n        return response;\r\n    }());\r\n\r\n    upload.initHandler();\r\n};\r\n","/*globals qq */\r\n/*jshint -W117 */\r\nqq.WindowReceiveMessage = function(o) {\r\n    \"use strict\";\r\n\r\n    var options = {\r\n            log: function(message, level) {}\r\n        },\r\n        callbackWrapperDetachers = {};\r\n\r\n    qq.extend(options, o);\r\n\r\n    qq.extend(this, {\r\n        receiveMessage: function(id, callback) {\r\n            var onMessageCallbackWrapper = function(event) {\r\n                    callback(event.data);\r\n                };\r\n\r\n            if (window.postMessage) {\r\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\r\n            }\r\n            else {\r\n                log(\"iframe message passing not supported in this browser!\", \"error\");\r\n            }\r\n        },\r\n\r\n        stopReceivingMessages: function(id) {\r\n            if (window.postMessage) {\r\n                var detacher = callbackWrapperDetachers[id];\r\n                if (detacher) {\r\n                    detacher();\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\r\n * in some cases by specific form upload handlers.\r\n *\r\n * @constructor\r\n */\r\nqq.FormUploadHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    var options = spec.options,\r\n        handler = this,\r\n        proxy = spec.proxy,\r\n        formHandlerInstanceId = qq.getUniqueId(),\r\n        onloadCallbacks = {},\r\n        detachLoadEvents = {},\r\n        postMessageCallbackTimers = {},\r\n        isCors = options.isCors,\r\n        inputName = options.inputName,\r\n        getUuid = proxy.getUuid,\r\n        log = proxy.log,\r\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\r\n\r\n    /**\r\n     * Remove any trace of the file from the handler.\r\n     *\r\n     * @param id ID of the associated file\r\n     */\r\n    function expungeFile(id) {\r\n        delete detachLoadEvents[id];\r\n\r\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\r\n        // In that case, terminate the timer waiting for a message from the loaded iframe\r\n        // and stop listening for any more messages coming from this iframe.\r\n        if (isCors) {\r\n            clearTimeout(postMessageCallbackTimers[id]);\r\n            delete postMessageCallbackTimers[id];\r\n            corsMessageReceiver.stopReceivingMessages(id);\r\n        }\r\n\r\n        var iframe = document.getElementById(handler._getIframeName(id));\r\n        if (iframe) {\r\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\r\n            // because it doesn't trigger ie6 prompt on https\r\n            /* jshint scripturl:true */\r\n            iframe.setAttribute(\"src\", \"javascript:false;\");\r\n\r\n            qq(iframe).remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param iframeName `document`-unique Name of the associated iframe\r\n     * @returns {*} ID of the associated file\r\n     */\r\n    function getFileIdForIframeName(iframeName) {\r\n        return iframeName.split(\"_\")[0];\r\n    }\r\n\r\n    /**\r\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\r\n     * to the current `document`.  Note that the iframe is hidden from view.\r\n     *\r\n     * @param name Name of the iframe.\r\n     * @returns {HTMLIFrameElement} The created iframe\r\n     */\r\n    function initIframeForUpload(name) {\r\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\r\n\r\n        iframe.setAttribute(\"id\", name);\r\n\r\n        iframe.style.display = \"none\";\r\n        document.body.appendChild(iframe);\r\n\r\n        return iframe;\r\n    }\r\n\r\n    /**\r\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\r\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\r\n     *\r\n     * @param iframe Listen for messages on this iframe.\r\n     * @param callback Invoke this callback with the message from the iframe.\r\n     */\r\n    function registerPostMessageCallback(iframe, callback) {\r\n        var iframeName = iframe.id,\r\n            fileId = getFileIdForIframeName(iframeName),\r\n            uuid = getUuid(fileId);\r\n\r\n        onloadCallbacks[uuid] = callback;\r\n\r\n        // When the iframe has loaded (after the server responds to an upload request)\r\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\r\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\r\n            if (handler.getInput(fileId)) {\r\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\r\n\r\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\r\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\r\n                    log(errorMessage, \"error\");\r\n                    callback({\r\n                        error: errorMessage\r\n                    });\r\n                }, 1000);\r\n            }\r\n        });\r\n\r\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\r\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\r\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\r\n            log(\"Received the following window message: '\" + message + \"'\");\r\n            var fileId = getFileIdForIframeName(iframeName),\r\n                response = handler._parseJsonResponse(message),\r\n                uuid = response.uuid,\r\n                onloadCallback;\r\n\r\n            if (uuid && onloadCallbacks[uuid]) {\r\n                log(\"Handling response for iframe name \" + iframeName);\r\n                clearTimeout(postMessageCallbackTimers[iframeName]);\r\n                delete postMessageCallbackTimers[iframeName];\r\n\r\n                handler._detachLoadEvent(iframeName);\r\n\r\n                onloadCallback = onloadCallbacks[uuid];\r\n\r\n                delete onloadCallbacks[uuid];\r\n                corsMessageReceiver.stopReceivingMessages(iframeName);\r\n                onloadCallback(response);\r\n            }\r\n            else if (!uuid) {\r\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    qq.extend(this, new qq.UploadHandler(spec));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            /**\r\n             * Adds File or Blob to the queue\r\n             **/\r\n            add: function(id, fileInput) {\r\n                super_.add(id, {input: fileInput});\r\n\r\n                fileInput.setAttribute(\"name\", inputName);\r\n\r\n                // remove file input from DOM\r\n                if (fileInput.parentNode) {\r\n                    qq(fileInput).remove();\r\n                }\r\n            },\r\n\r\n            expunge: function(id) {\r\n                expungeFile(id);\r\n                super_.expunge(id);\r\n            },\r\n\r\n            isValid: function(id) {\r\n                return super_.isValid(id) &&\r\n                    handler._getFileState(id).input !== undefined;\r\n            }\r\n        };\r\n    });\r\n\r\n    qq.extend(this, {\r\n        getInput: function(id) {\r\n            return handler._getFileState(id).input;\r\n        },\r\n\r\n        /**\r\n         * This function either delegates to a more specific message handler if CORS is involved,\r\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\r\n         * after determining if the content of the iframe is accessible.\r\n         *\r\n         * @param iframe Associated iframe\r\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\r\n         */\r\n        _attachLoadEvent: function(iframe, callback) {\r\n            /*jslint eqeq: true*/\r\n            var responseDescriptor;\r\n\r\n            if (isCors) {\r\n                registerPostMessageCallback(iframe, callback);\r\n            }\r\n            else {\r\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\r\n                    log(\"Received response for \" + iframe.id);\r\n\r\n                    // when we remove iframe from dom\r\n                    // the request stops, but in IE load\r\n                    // event fires\r\n                    if (!iframe.parentNode) {\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        // fixing Opera 10.53\r\n                        if (iframe.contentDocument &&\r\n                            iframe.contentDocument.body &&\r\n                            iframe.contentDocument.body.innerHTML == \"false\") {\r\n                            // In Opera event is fired second time\r\n                            // when body.innerHTML changed from false\r\n                            // to server response approx. after 1 sec\r\n                            // when we upload file with iframe\r\n                            return;\r\n                        }\r\n                    }\r\n                    catch (error) {\r\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\r\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\r\n                        responseDescriptor = {success: false};\r\n                    }\r\n\r\n                    callback(responseDescriptor);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates an iframe with a specific document-unique name.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @returns {HTMLIFrameElement}\r\n         */\r\n        _createIframe: function(id) {\r\n            var iframeName = handler._getIframeName(id);\r\n\r\n            return initIframeForUpload(iframeName);\r\n        },\r\n\r\n        /**\r\n         * Called when we are no longer interested in being notified when an iframe has loaded.\r\n         *\r\n         * @param id Associated file ID\r\n         */\r\n        _detachLoadEvent: function(id) {\r\n            if (detachLoadEvents[id] !== undefined) {\r\n                detachLoadEvents[id]();\r\n                delete detachLoadEvents[id];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param fileId ID of the associated file\r\n         * @returns {string} The `document`-unique name of the iframe\r\n         */\r\n        _getIframeName: function(fileId) {\r\n            return fileId + \"_\" + formHandlerInstanceId;\r\n        },\r\n\r\n        /**\r\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\r\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\r\n         * that the form is hidden from view.\r\n         *\r\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\r\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\r\n         * @returns {HTMLFormElement} The created form\r\n         */\r\n        _initFormForUpload: function(spec) {\r\n            var method = spec.method,\r\n                endpoint = spec.endpoint,\r\n                params = spec.params,\r\n                paramsInBody = spec.paramsInBody,\r\n                targetName = spec.targetName,\r\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\r\n                url = endpoint;\r\n\r\n            if (paramsInBody) {\r\n                qq.obj2Inputs(params, form);\r\n            }\r\n            else {\r\n                url = qq.obj2url(params, endpoint);\r\n            }\r\n\r\n            form.setAttribute(\"action\", url);\r\n            form.setAttribute(\"target\", targetName);\r\n            form.style.display = \"none\";\r\n            document.body.appendChild(form);\r\n\r\n            return form;\r\n        },\r\n\r\n        /**\r\n         * @param innerHtmlOrMessage JSON message\r\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\r\n         */\r\n        _parseJsonResponse: function(innerHtmlOrMessage) {\r\n            var response = {};\r\n\r\n            try {\r\n                response = qq.parseJson(innerHtmlOrMessage);\r\n            }\r\n            catch (error) {\r\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\r\n            }\r\n\r\n            return response;\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\r\n * XHR upload handlers.\r\n *\r\n * @constructor\r\n */\r\nqq.XhrUploadHandler = function(spec) {\r\n    \"use strict\";\r\n\r\n    var handler = this,\r\n        namespace = spec.options.namespace,\r\n        proxy = spec.proxy,\r\n        chunking = spec.options.chunking,\r\n        resume = spec.options.resume,\r\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\r\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\r\n        getName = proxy.getName,\r\n        getSize = proxy.getSize,\r\n        getUuid = proxy.getUuid,\r\n        getEndpoint = proxy.getEndpoint,\r\n        getDataByUuid = proxy.getDataByUuid,\r\n        onUuidChanged = proxy.onUuidChanged,\r\n        onProgress = proxy.onProgress,\r\n        log = proxy.log;\r\n\r\n    function abort(id) {\r\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\r\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\r\n\r\n            xhr.onreadystatechange = null;\r\n            xhr.upload.onprogress = null;\r\n            xhr.abort();\r\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\r\n        });\r\n    }\r\n\r\n    qq.extend(this, new qq.UploadHandler(spec));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            /**\r\n             * Adds File or Blob to the queue\r\n             **/\r\n            add: function(id, blobOrProxy) {\r\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\r\n                    super_.add(id, {file: blobOrProxy});\r\n                }\r\n                else if (blobOrProxy instanceof qq.BlobProxy) {\r\n                    super_.add(id, {proxy: blobOrProxy});\r\n                }\r\n                else {\r\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\r\n                }\r\n\r\n                handler._initTempState(id);\r\n                resumeEnabled && handler._maybePrepareForResume(id);\r\n            },\r\n\r\n            expunge: function(id) {\r\n                abort(id);\r\n                handler._maybeDeletePersistedChunkData(id);\r\n                handler._clearXhrs(id);\r\n                super_.expunge(id);\r\n            }\r\n        };\r\n    });\r\n\r\n    qq.extend(this, {\r\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\r\n        clearCachedChunk: function(id, chunkIdx) {\r\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\r\n        },\r\n\r\n        clearXhr: function(id, chunkIdx) {\r\n            var tempState = handler._getFileState(id).temp;\r\n\r\n            if (tempState.xhrs) {\r\n                delete tempState.xhrs[chunkIdx];\r\n            }\r\n            if (tempState.ajaxRequesters) {\r\n                delete tempState.ajaxRequesters[chunkIdx];\r\n            }\r\n        },\r\n\r\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\r\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\r\n        finalizeChunks: function(id, responseParser) {\r\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\r\n                xhr = handler._getXhr(id, lastChunkIdx);\r\n\r\n            if (responseParser) {\r\n                return new qq.Promise().success(responseParser(xhr), xhr);\r\n            }\r\n\r\n            return new qq.Promise().success({}, xhr);\r\n        },\r\n\r\n        getFile: function(id) {\r\n            return handler.isValid(id) && handler._getFileState(id).file;\r\n        },\r\n\r\n        getProxy: function(id) {\r\n            return handler.isValid(id) && handler._getFileState(id).proxy;\r\n        },\r\n\r\n        /**\r\n         * @returns {Array} Array of objects containing properties useful to integrators\r\n         * when it is important to determine which files are potentially resumable.\r\n         */\r\n        getResumableFilesData: function() {\r\n            var resumableFilesData = [];\r\n\r\n            handler._iterateResumeRecords(function(key, uploadData) {\r\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\r\n\r\n                var data = {\r\n                    name: uploadData.name,\r\n                    remaining: uploadData.chunking.remaining,\r\n                    size: uploadData.size,\r\n                    uuid: uploadData.uuid\r\n                };\r\n\r\n                if (uploadData.key) {\r\n                    data.key = uploadData.key;\r\n                }\r\n\r\n                resumableFilesData.push(data);\r\n            });\r\n\r\n            return resumableFilesData;\r\n        },\r\n\r\n        isResumable: function(id) {\r\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\r\n        },\r\n\r\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\r\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\r\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\r\n\r\n            if (inProgress) {\r\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\r\n                inProgress.reverse();\r\n                qq.each(inProgress, function(idx, chunkIdx) {\r\n                    remaining.unshift(chunkIdx);\r\n                });\r\n                inProgress.length = 0;\r\n            }\r\n        },\r\n\r\n        pause: function(id) {\r\n            if (handler.isValid(id)) {\r\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\r\n                handler._getFileState(id).paused = true;\r\n                abort(id);\r\n                return true;\r\n            }\r\n        },\r\n\r\n        reevaluateChunking: function(id) {\r\n            if (chunking && handler.isValid(id)) {\r\n                var state = handler._getFileState(id),\r\n                    totalChunks,\r\n                    i;\r\n\r\n                delete state.chunking;\r\n\r\n                state.chunking = {};\r\n                totalChunks = handler._getTotalChunks(id);\r\n                if (totalChunks > 1 || chunking.mandatory) {\r\n                    state.chunking.enabled = true;\r\n                    state.chunking.parts = totalChunks;\r\n                    state.chunking.remaining = [];\r\n\r\n                    for (i = 0; i < totalChunks; i++) {\r\n                        state.chunking.remaining.push(i);\r\n                    }\r\n\r\n                    handler._initTempState(id);\r\n                }\r\n                else {\r\n                    state.chunking.enabled = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        updateBlob: function(id, newBlob) {\r\n            if (handler.isValid(id)) {\r\n                handler._getFileState(id).file = newBlob;\r\n            }\r\n        },\r\n\r\n        _clearXhrs: function(id) {\r\n            var tempState = handler._getFileState(id).temp;\r\n\r\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\r\n                delete tempState.ajaxRequesters[chunkId];\r\n            });\r\n\r\n            qq.each(tempState.xhrs, function(chunkId) {\r\n                delete tempState.xhrs[chunkId];\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Creates an XHR instance for this file and stores it in the fileState.\r\n         *\r\n         * @param id File ID\r\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\r\n         * @returns {XMLHttpRequest}\r\n         */\r\n        _createXhr: function(id, optChunkIdx) {\r\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\r\n        },\r\n\r\n        _getAjaxRequester: function(id, optChunkIdx) {\r\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\r\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\r\n        },\r\n\r\n        _getChunkData: function(id, chunkIndex) {\r\n            var chunkSize = chunking.partSize,\r\n                fileSize = getSize(id),\r\n                fileOrBlob = handler.getFile(id),\r\n                startBytes = chunkSize * chunkIndex,\r\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\r\n                totalChunks = handler._getTotalChunks(id),\r\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\r\n\r\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\r\n            // See https://github.com/Widen/fine-uploader/issues/937#issuecomment-41418760\r\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\r\n\r\n            cachedChunks[chunkIndex] = blob;\r\n\r\n            return {\r\n                part: chunkIndex,\r\n                start: startBytes,\r\n                end: endBytes,\r\n                count: totalChunks,\r\n                blob: blob,\r\n                size: endBytes - startBytes\r\n            };\r\n        },\r\n\r\n        _getChunkDataForCallback: function(chunkData) {\r\n            return {\r\n                partIndex: chunkData.part,\r\n                startByte: chunkData.start + 1,\r\n                endByte: chunkData.end,\r\n                totalParts: chunkData.count\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param id File ID\r\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\r\n         */\r\n        _getLocalStorageId: function(id) {\r\n            var formatVersion = \"5.0\",\r\n                name = getName(id),\r\n                size = getSize(id),\r\n                chunkSize = chunking.partSize,\r\n                endpoint = getEndpoint(id);\r\n\r\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\r\n        },\r\n\r\n        _getMimeType: function(id) {\r\n            return handler.getFile(id).type;\r\n        },\r\n\r\n        _getPersistableData: function(id) {\r\n            return handler._getFileState(id).chunking;\r\n        },\r\n\r\n        /**\r\n         * @param id ID of the associated file\r\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\r\n         */\r\n        _getTotalChunks: function(id) {\r\n            if (chunking) {\r\n                var fileSize = getSize(id),\r\n                    chunkSize = chunking.partSize;\r\n\r\n                return Math.ceil(fileSize / chunkSize);\r\n            }\r\n        },\r\n\r\n        _getXhr: function(id, optChunkIdx) {\r\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\r\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\r\n        },\r\n\r\n        _getXhrs: function(id) {\r\n            return handler._getFileState(id).temp.xhrs;\r\n        },\r\n\r\n        // Iterates through all XHR handler-created resume records (in local storage),\r\n        // invoking the passed callback and passing in the key and value of each local storage record.\r\n        _iterateResumeRecords: function(callback) {\r\n            if (resumeEnabled) {\r\n                qq.each(localStorage, function(key, item) {\r\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\r\n                        var uploadData = JSON.parse(item);\r\n                        callback(key, uploadData);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        _initTempState: function(id) {\r\n            handler._getFileState(id).temp = {\r\n                ajaxRequesters: {},\r\n                chunkProgress: {},\r\n                xhrs: {},\r\n                cachedChunks: {}\r\n            };\r\n        },\r\n\r\n        _markNotResumable: function(id) {\r\n            handler._getFileState(id).notResumable = true;\r\n        },\r\n\r\n        // Removes a chunked upload record from local storage, if possible.\r\n        // Returns true if the item was removed, false otherwise.\r\n        _maybeDeletePersistedChunkData: function(id) {\r\n            var localStorageId;\r\n\r\n            if (resumeEnabled && handler.isResumable(id)) {\r\n                localStorageId = handler._getLocalStorageId(id);\r\n\r\n                if (localStorageId && localStorage.getItem(localStorageId)) {\r\n                    localStorage.removeItem(localStorageId);\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\r\n        // so we can pick up from where we left off.\r\n        _maybePrepareForResume: function(id) {\r\n            var state = handler._getFileState(id),\r\n                localStorageId, persistedData;\r\n\r\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\r\n            // so prepare for a resume attempt.\r\n            if (resumeEnabled && state.key === undefined) {\r\n                localStorageId = handler._getLocalStorageId(id);\r\n                persistedData = localStorage.getItem(localStorageId);\r\n\r\n                // If we found this item in local storage, maybe we should resume it.\r\n                if (persistedData) {\r\n                    persistedData = JSON.parse(persistedData);\r\n\r\n                    // If we found a resume record but we have already handled this file in this session,\r\n                    // don't try to resume it & ensure we don't persist future check data\r\n                    if (getDataByUuid(persistedData.uuid)) {\r\n                        handler._markNotResumable(id);\r\n                    }\r\n                    else {\r\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\r\n\r\n                        onUuidChanged(id, persistedData.uuid);\r\n\r\n                        state.key = persistedData.key;\r\n                        state.chunking = persistedData.chunking;\r\n                        state.loaded = persistedData.loaded;\r\n                        state.attemptingResume = true;\r\n\r\n                        handler.moveInProgressToRemaining(id);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        // Persist any data needed to resume this upload in a new session.\r\n        _maybePersistChunkedState: function(id) {\r\n            var state = handler._getFileState(id),\r\n                localStorageId, persistedData;\r\n\r\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\r\n            if (resumeEnabled && handler.isResumable(id)) {\r\n                localStorageId = handler._getLocalStorageId(id);\r\n\r\n                persistedData = {\r\n                    name: getName(id),\r\n                    size: getSize(id),\r\n                    uuid: getUuid(id),\r\n                    key: state.key,\r\n                    chunking: state.chunking,\r\n                    loaded: state.loaded,\r\n                    lastUpdated: Date.now()\r\n                };\r\n\r\n                try {\r\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\r\n                }\r\n                catch (error) {\r\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\r\n                }\r\n            }\r\n        },\r\n\r\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\r\n            var xhr = handler._getXhr(id, chunkIdx),\r\n                name = getName(id),\r\n                progressCalculator = {\r\n                    simple: function(loaded, total) {\r\n                        var fileSize = getSize(id);\r\n\r\n                        if (loaded === total) {\r\n                            onProgress(id, name, fileSize, fileSize);\r\n                        }\r\n                        else {\r\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\r\n                        }\r\n                    },\r\n\r\n                    chunked: function(loaded, total) {\r\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\r\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\r\n                            loadedForRequest = loaded,\r\n                            totalForRequest = total,\r\n                            totalFileSize = getSize(id),\r\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\r\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\r\n\r\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\r\n\r\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\r\n                            totalLoadedForFile += chunkLoaded;\r\n                        });\r\n\r\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\r\n                    }\r\n                };\r\n\r\n            xhr.upload.onprogress = function(e) {\r\n                if (e.lengthComputable) {\r\n                    /* jshint eqnull: true */\r\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\r\n                    progressCalculator[type](e.loaded, e.total);\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Registers an XHR transport instance created elsewhere.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\r\n         * @param xhr XMLHttpRequest object instance\r\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\r\n         * @returns {XMLHttpRequest}\r\n         */\r\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\r\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\r\n                tempState = handler._getFileState(id).temp;\r\n\r\n            tempState.xhrs = tempState.xhrs || {};\r\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\r\n\r\n            tempState.xhrs[xhrsId] = xhr;\r\n\r\n            if (optAjaxRequester) {\r\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\r\n            }\r\n\r\n            return xhr;\r\n        },\r\n\r\n        // Deletes any local storage records that are \"expired\".\r\n        _removeExpiredChunkingRecords: function() {\r\n            var expirationDays = resume.recordsExpireIn;\r\n\r\n            handler._iterateResumeRecords(function(key, uploadData) {\r\n                var expirationDate = new Date(uploadData.lastUpdated);\r\n\r\n                // transform updated date into expiration date\r\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\r\n\r\n                if (expirationDate.getTime() <= Date.now()) {\r\n                    log(\"Removing expired resume record with key \" + key);\r\n                    localStorage.removeItem(key);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Determine if the associated file should be chunked.\r\n         *\r\n         * @param id ID of the associated file\r\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\r\n         */\r\n        _shouldChunkThisFile: function(id) {\r\n            var state = handler._getFileState(id);\r\n\r\n            if (!state.chunking) {\r\n                handler.reevaluateChunking(id);\r\n            }\r\n\r\n            return state.chunking.enabled;\r\n        }\r\n    });\r\n};\r\n","/*globals qq, XMLHttpRequest*/\r\nqq.DeleteFileAjaxRequester = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        options = {\r\n            method: \"DELETE\",\r\n            uuidParamName: \"qquuid\",\r\n            endpointStore: {},\r\n            maxConnections: 3,\r\n            customHeaders: function(id) {return {};},\r\n            paramsStore: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            log: function(str, level) {},\r\n            onDelete: function(id) {},\r\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    function getMandatedParams() {\r\n        if (options.method.toUpperCase() === \"POST\") {\r\n            return {\r\n                _method: \"DELETE\"\r\n            };\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        validMethods: [\"POST\", \"DELETE\"],\r\n        method: options.method,\r\n        endpointStore: options.endpointStore,\r\n        paramsStore: options.paramsStore,\r\n        mandatedParams: getMandatedParams(),\r\n        maxConnections: options.maxConnections,\r\n        customHeaders: function(id) {\r\n            return options.customHeaders.get(id);\r\n        },\r\n        log: options.log,\r\n        onSend: options.onDelete,\r\n        onComplete: options.onDeleteComplete,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        sendDelete: function(id, uuid, additionalMandatedParams) {\r\n            var additionalOptions = additionalMandatedParams || {};\r\n\r\n            options.log(\"Submitting delete file request for \" + id);\r\n\r\n            if (options.method === \"DELETE\") {\r\n                requester.initTransport(id)\r\n                    .withPath(uuid)\r\n                    .withParams(additionalOptions)\r\n                    .send();\r\n            }\r\n            else {\r\n                additionalOptions[options.uuidParamName] = uuid;\r\n                requester.initTransport(id)\r\n                    .withParams(additionalOptions)\r\n                    .send();\r\n            }\r\n        }\r\n    });\r\n};\r\n","/*global qq, define */\r\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\r\n/**\r\n * Mega pixel image rendering library for iOS6+\r\n *\r\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\r\n * which causes unexpected subsampling when drawing it in canvas.\r\n * By using this library, you can safely render the image with proper stretching.\r\n *\r\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\r\n * Released under the MIT license\r\n *\r\n * Heavily modified by Widen for Fine Uploader\r\n */\r\n(function() {\r\n\r\n    /**\r\n     * Detect subsampling in loaded image.\r\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\r\n     */\r\n    function detectSubsampling(img) {\r\n        var iw = img.naturalWidth,\r\n            ih = img.naturalHeight,\r\n            canvas = document.createElement(\"canvas\"),\r\n            ctx;\r\n\r\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\r\n            canvas.width = canvas.height = 1;\r\n            ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(img, -iw + 1, 0);\r\n            // subsampled image becomes half smaller in rendering size.\r\n            // check alpha channel value to confirm image is covering edge pixel or not.\r\n            // if alpha value is 0 image is not covering, hence subsampled.\r\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detecting vertical squash in loaded image.\r\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\r\n     */\r\n    function detectVerticalSquash(img, iw, ih) {\r\n        var canvas = document.createElement(\"canvas\"),\r\n            sy = 0,\r\n            ey = ih,\r\n            py = ih,\r\n            ctx, data, alpha, ratio;\r\n\r\n        canvas.width = 1;\r\n        canvas.height = ih;\r\n        ctx = canvas.getContext(\"2d\");\r\n        ctx.drawImage(img, 0, 0);\r\n        data = ctx.getImageData(0, 0, 1, ih).data;\r\n\r\n        // search image edge pixel position in case it is squashed vertically.\r\n        while (py > sy) {\r\n            alpha = data[(py - 1) * 4 + 3];\r\n            if (alpha === 0) {\r\n                ey = py;\r\n            } else {\r\n                sy = py;\r\n            }\r\n            py = (ey + sy) >> 1;\r\n        }\r\n\r\n        ratio = (py / ih);\r\n        return (ratio === 0) ? 1 : ratio;\r\n    }\r\n\r\n    /**\r\n     * Rendering image element (with resizing) and get its data URL\r\n     */\r\n    function renderImageToDataURL(img, blob, options, doSquash) {\r\n        var canvas = document.createElement(\"canvas\"),\r\n            mime = options.mime || \"image/jpeg\",\r\n            promise = new qq.Promise();\r\n\r\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\r\n            .then(function() {\r\n                promise.success(\r\n                    canvas.toDataURL(mime, options.quality || 0.8)\r\n                );\r\n            });\r\n\r\n        return promise;\r\n    }\r\n\r\n    function maybeCalculateDownsampledDimensions(spec) {\r\n        var maxPixels = 5241000; //iOS specific value\r\n\r\n        if (!qq.ios()) {\r\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\r\n        }\r\n\r\n        if (spec.origHeight * spec.origWidth > maxPixels) {\r\n            return {\r\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\r\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rendering image element (with resizing) into the canvas element\r\n     */\r\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\r\n        var iw = img.naturalWidth,\r\n            ih = img.naturalHeight,\r\n            width = options.width,\r\n            height = options.height,\r\n            ctx = canvas.getContext(\"2d\"),\r\n            promise = new qq.Promise(),\r\n            modifiedDimensions;\r\n\r\n        ctx.save();\r\n\r\n        if (options.resize) {\r\n            return renderImageToCanvasWithCustomResizer({\r\n                blob: blob,\r\n                canvas: canvas,\r\n                image: img,\r\n                imageHeight: ih,\r\n                imageWidth: iw,\r\n                orientation: options.orientation,\r\n                resize: options.resize,\r\n                targetHeight: height,\r\n                targetWidth: width\r\n            });\r\n        }\r\n\r\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\r\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\r\n                origWidth: width,\r\n                origHeight: height\r\n            });\r\n\r\n            if (modifiedDimensions) {\r\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\r\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\r\n                    \"warn\");\r\n\r\n                width = modifiedDimensions.newWidth;\r\n                height = modifiedDimensions.newHeight;\r\n            }\r\n        }\r\n\r\n        transformCoordinate(canvas, width, height, options.orientation);\r\n\r\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\r\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\r\n        if (qq.ios()) {\r\n            (function() {\r\n                if (detectSubsampling(img)) {\r\n                    iw /= 2;\r\n                    ih /= 2;\r\n                }\r\n\r\n                var d = 1024, // size of tiling canvas\r\n                    tmpCanvas = document.createElement(\"canvas\"),\r\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\r\n                    dw = Math.ceil(d * width / iw),\r\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\r\n                    sy = 0,\r\n                    dy = 0,\r\n                    tmpCtx, sx, dx;\r\n\r\n                tmpCanvas.width = tmpCanvas.height = d;\r\n                tmpCtx = tmpCanvas.getContext(\"2d\");\r\n\r\n                while (sy < ih) {\r\n                    sx = 0;\r\n                    dx = 0;\r\n                    while (sx < iw) {\r\n                        tmpCtx.clearRect(0, 0, d, d);\r\n                        tmpCtx.drawImage(img, -sx, -sy);\r\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\r\n                        sx += d;\r\n                        dx += dw;\r\n                    }\r\n                    sy += d;\r\n                    dy += dh;\r\n                }\r\n                ctx.restore();\r\n                tmpCanvas = tmpCtx = null;\r\n            }());\r\n        }\r\n        else {\r\n            ctx.drawImage(img, 0, 0, width, height);\r\n        }\r\n\r\n        canvas.qqImageRendered && canvas.qqImageRendered();\r\n        promise.success();\r\n\r\n        return promise;\r\n    }\r\n\r\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\r\n        var blob = resizeInfo.blob,\r\n            image = resizeInfo.image,\r\n            imageHeight = resizeInfo.imageHeight,\r\n            imageWidth = resizeInfo.imageWidth,\r\n            orientation = resizeInfo.orientation,\r\n            promise = new qq.Promise(),\r\n            resize = resizeInfo.resize,\r\n            sourceCanvas = document.createElement(\"canvas\"),\r\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\r\n            targetCanvas = resizeInfo.canvas,\r\n            targetHeight = resizeInfo.targetHeight,\r\n            targetWidth = resizeInfo.targetWidth;\r\n\r\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\r\n\r\n        targetCanvas.height = targetHeight;\r\n        targetCanvas.width = targetWidth;\r\n\r\n        sourceCanvasContext.drawImage(image, 0, 0);\r\n\r\n        resize({\r\n            blob: blob,\r\n            height: targetHeight,\r\n            image: image,\r\n            sourceCanvas: sourceCanvas,\r\n            targetCanvas: targetCanvas,\r\n            width: targetWidth\r\n        })\r\n            .then(\r\n                function success() {\r\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\r\n                    promise.success();\r\n                },\r\n                promise.failure\r\n            );\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Transform canvas coordination according to specified frame size and orientation\r\n     * Orientation value is from EXIF tag\r\n     */\r\n    function transformCoordinate(canvas, width, height, orientation) {\r\n        switch (orientation) {\r\n            case 5:\r\n            case 6:\r\n            case 7:\r\n            case 8:\r\n                canvas.width = height;\r\n                canvas.height = width;\r\n                break;\r\n            default:\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n        }\r\n        var ctx = canvas.getContext(\"2d\");\r\n        switch (orientation) {\r\n            case 2:\r\n                // horizontal flip\r\n                ctx.translate(width, 0);\r\n                ctx.scale(-1, 1);\r\n                break;\r\n            case 3:\r\n                // 180 rotate left\r\n                ctx.translate(width, height);\r\n                ctx.rotate(Math.PI);\r\n                break;\r\n            case 4:\r\n                // vertical flip\r\n                ctx.translate(0, height);\r\n                ctx.scale(1, -1);\r\n                break;\r\n            case 5:\r\n                // vertical flip + 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.scale(1, -1);\r\n                break;\r\n            case 6:\r\n                // 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.translate(0, -height);\r\n                break;\r\n            case 7:\r\n                // horizontal flip + 90 rotate right\r\n                ctx.rotate(0.5 * Math.PI);\r\n                ctx.translate(width, -height);\r\n                ctx.scale(-1, 1);\r\n                break;\r\n            case 8:\r\n                // 90 rotate left\r\n                ctx.rotate(-0.5 * Math.PI);\r\n                ctx.translate(-width, 0);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * MegaPixImage class\r\n     */\r\n    function MegaPixImage(srcImage, errorCallback) {\r\n        var self = this;\r\n\r\n        if (window.Blob && srcImage instanceof Blob) {\r\n            (function() {\r\n                var img = new Image(),\r\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\r\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\r\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\r\n                img.src = URL.createObjectURL(srcImage);\r\n                self.blob = srcImage;\r\n                srcImage = img;\r\n            }());\r\n        }\r\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\r\n            srcImage.onload = function() {\r\n                var listeners = self.imageLoadListeners;\r\n                if (listeners) {\r\n                    self.imageLoadListeners = null;\r\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\r\n                    // so let's push this to the end of the UI thread queue.\r\n                    setTimeout(function() {\r\n                        for (var i = 0, len = listeners.length; i < len; i++) {\r\n                            listeners[i]();\r\n                        }\r\n                    }, 0);\r\n                }\r\n            };\r\n            srcImage.onerror = errorCallback;\r\n            this.imageLoadListeners = [];\r\n        }\r\n        this.srcImage = srcImage;\r\n    }\r\n\r\n    /**\r\n     * Rendering megapix image into specified target element\r\n     */\r\n    MegaPixImage.prototype.render = function(target, options) {\r\n        options = options || {};\r\n\r\n        var self = this,\r\n            imgWidth = this.srcImage.naturalWidth,\r\n            imgHeight = this.srcImage.naturalHeight,\r\n            width = options.width,\r\n            height = options.height,\r\n            maxWidth = options.maxWidth,\r\n            maxHeight = options.maxHeight,\r\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\r\n            tagName = target.tagName.toLowerCase(),\r\n            opt;\r\n\r\n        if (this.imageLoadListeners) {\r\n            this.imageLoadListeners.push(function() { self.render(target, options); });\r\n            return;\r\n        }\r\n\r\n        if (width && !height) {\r\n            height = (imgHeight * width / imgWidth) << 0;\r\n        } else if (height && !width) {\r\n            width = (imgWidth * height / imgHeight) << 0;\r\n        } else {\r\n            width = imgWidth;\r\n            height = imgHeight;\r\n        }\r\n        if (maxWidth && width > maxWidth) {\r\n            width = maxWidth;\r\n            height = (imgHeight * width / imgWidth) << 0;\r\n        }\r\n        if (maxHeight && height > maxHeight) {\r\n            height = maxHeight;\r\n            width = (imgWidth * height / imgHeight) << 0;\r\n        }\r\n\r\n        opt = { width: width, height: height },\r\n        qq.each(options, function(optionsKey, optionsValue) {\r\n            opt[optionsKey] = optionsValue;\r\n        });\r\n\r\n        if (tagName === \"img\") {\r\n            (function() {\r\n                var oldTargetSrc = target.src;\r\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\r\n                    .then(function(dataUri) {\r\n                        target.src = dataUri;\r\n                        oldTargetSrc === target.src && target.onload();\r\n                    });\r\n            }());\r\n        } else if (tagName === \"canvas\") {\r\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\r\n        }\r\n        if (typeof this.onrender === \"function\") {\r\n            this.onrender(target);\r\n        }\r\n    };\r\n\r\n    qq.MegaPixImage = MegaPixImage;\r\n})();\r\n","/*globals qq */\r\n/**\r\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\r\n *\r\n * @constructor\r\n */\r\nqq.ImageGenerator = function(log) {\r\n    \"use strict\";\r\n\r\n    function isImg(el) {\r\n        return el.tagName.toLowerCase() === \"img\";\r\n    }\r\n\r\n    function isCanvas(el) {\r\n        return el.tagName.toLowerCase() === \"canvas\";\r\n    }\r\n\r\n    function isImgCorsSupported() {\r\n        return new Image().crossOrigin !== undefined;\r\n    }\r\n\r\n    function isCanvasSupported() {\r\n        var canvas = document.createElement(\"canvas\");\r\n\r\n        return canvas.getContext && canvas.getContext(\"2d\");\r\n    }\r\n\r\n    // This is only meant to determine the MIME type of a renderable image file.\r\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\r\n    // are rendered correctly, among other things.\r\n    function determineMimeOfFileName(nameWithPath) {\r\n        /*jshint -W015 */\r\n        var pathSegments = nameWithPath.split(\"/\"),\r\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\r\n            extension = qq.getExtension(name);\r\n\r\n        extension = extension && extension.toLowerCase();\r\n\r\n        switch (extension) {\r\n            case \"jpeg\":\r\n            case \"jpg\":\r\n                return \"image/jpeg\";\r\n            case \"png\":\r\n                return \"image/png\";\r\n            case \"bmp\":\r\n                return \"image/bmp\";\r\n            case \"gif\":\r\n                return \"image/gif\";\r\n            case \"tiff\":\r\n            case \"tif\":\r\n                return \"image/tiff\";\r\n        }\r\n    }\r\n\r\n    // This will likely not work correctly in IE8 and older.\r\n    // It's only used as part of a formula to determine\r\n    // if a canvas can be used to scale a server-hosted thumbnail.\r\n    // If canvas isn't supported by the UA (IE8 and older)\r\n    // this method should not even be called.\r\n    function isCrossOrigin(url) {\r\n        var targetAnchor = document.createElement(\"a\"),\r\n            targetProtocol, targetHostname, targetPort;\r\n\r\n        targetAnchor.href = url;\r\n\r\n        targetProtocol = targetAnchor.protocol;\r\n        targetPort = targetAnchor.port;\r\n        targetHostname = targetAnchor.hostname;\r\n\r\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\r\n            return true;\r\n        }\r\n\r\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\r\n            return true;\r\n        }\r\n\r\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\r\n        if (targetPort !== window.location.port && !qq.ie()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function registerImgLoadListeners(img, promise) {\r\n        img.onload = function() {\r\n            img.onload = null;\r\n            img.onerror = null;\r\n            promise.success(img);\r\n        };\r\n\r\n        img.onerror = function() {\r\n            img.onload = null;\r\n            img.onerror = null;\r\n            log(\"Problem drawing thumbnail!\", \"error\");\r\n            promise.failure(img, \"Problem drawing thumbnail!\");\r\n        };\r\n    }\r\n\r\n    function registerCanvasDrawImageListener(canvas, promise) {\r\n        // The image is drawn on the canvas by a third-party library,\r\n        // and we want to know when this is completed.  Since the library\r\n        // may invoke drawImage many times in a loop, we need to be called\r\n        // back when the image is fully rendered.  So, we are expecting the\r\n        // code that draws this image to follow a convention that involves a\r\n        // function attached to the canvas instance be invoked when it is done.\r\n        canvas.qqImageRendered = function() {\r\n            promise.success(canvas);\r\n        };\r\n    }\r\n\r\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\r\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\r\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\r\n    // attempt was not successful.\r\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\r\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\r\n\r\n        if (isImg(imgOrCanvas)) {\r\n            registerImgLoadListeners(imgOrCanvas, promise);\r\n        }\r\n        else if (isCanvas(imgOrCanvas)) {\r\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\r\n        }\r\n        else {\r\n            promise.failure(imgOrCanvas);\r\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\r\n        }\r\n\r\n        return registered;\r\n    }\r\n\r\n    // Draw a preview iff the current UA can natively display it.\r\n    // Also rotate the image if necessary.\r\n    function draw(fileOrBlob, container, options) {\r\n        var drawPreview = new qq.Promise(),\r\n            identifier = new qq.Identify(fileOrBlob, log),\r\n            maxSize = options.maxSize,\r\n            // jshint eqnull:true\r\n            orient = options.orient == null ? true : options.orient,\r\n            megapixErrorHandler = function() {\r\n                container.onerror = null;\r\n                container.onload = null;\r\n                log(\"Could not render preview, file may be too large!\", \"error\");\r\n                drawPreview.failure(container, \"Browser cannot render image!\");\r\n            };\r\n\r\n        identifier.isPreviewable().then(\r\n            function(mime) {\r\n                // If options explicitly specify that Orientation is not desired,\r\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\r\n                var dummyExif = {\r\n                        parse: function() {\r\n                            return new qq.Promise().success();\r\n                        }\r\n                    },\r\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\r\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\r\n\r\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\r\n                    exif.parse().then(\r\n                        function(exif) {\r\n                            var orientation = exif && exif.Orientation;\r\n\r\n                            mpImg.render(container, {\r\n                                maxWidth: maxSize,\r\n                                maxHeight: maxSize,\r\n                                orientation: orientation,\r\n                                mime: mime,\r\n                                resize: options.customResizeFunction\r\n                            });\r\n                        },\r\n\r\n                        function(failureMsg) {\r\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\r\n\r\n                            mpImg.render(container, {\r\n                                maxWidth: maxSize,\r\n                                maxHeight: maxSize,\r\n                                mime: mime,\r\n                                resize: options.customResizeFunction\r\n                            });\r\n                        }\r\n                    );\r\n                }\r\n            },\r\n\r\n            function() {\r\n                log(\"Not previewable\");\r\n                drawPreview.failure(container, \"Not previewable\");\r\n            }\r\n        );\r\n\r\n        return drawPreview;\r\n    }\r\n\r\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\r\n        var tempImg = new Image(),\r\n            tempImgRender = new qq.Promise();\r\n\r\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\r\n\r\n        if (isCrossOrigin(url)) {\r\n            tempImg.crossOrigin = \"anonymous\";\r\n        }\r\n\r\n        tempImg.src = url;\r\n\r\n        tempImgRender.then(\r\n            function rendered() {\r\n                registerThumbnailRenderedListener(canvasOrImg, draw);\r\n\r\n                var mpImg = new qq.MegaPixImage(tempImg);\r\n                mpImg.render(canvasOrImg, {\r\n                    maxWidth: maxSize,\r\n                    maxHeight: maxSize,\r\n                    mime: determineMimeOfFileName(url),\r\n                    resize: customResizeFunction\r\n                });\r\n            },\r\n\r\n            draw.failure\r\n        );\r\n    }\r\n\r\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\r\n        registerThumbnailRenderedListener(img, draw);\r\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\r\n        // that must drop back to CSS is known and exploited by the templating module.\r\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\r\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\r\n        qq(img).css({\r\n            maxWidth: maxSize + \"px\",\r\n            maxHeight: maxSize + \"px\"\r\n        });\r\n\r\n        img.src = url;\r\n    }\r\n\r\n    // Draw a (server-hosted) thumbnail given a URL.\r\n    // This will optionally scale the thumbnail as well.\r\n    // It attempts to use <canvas> to scale, but will fall back\r\n    // to max-width and max-height style properties if the UA\r\n    // doesn't support canvas or if the images is cross-domain and\r\n    // the UA doesn't support the crossorigin attribute on img tags,\r\n    // which is required to scale a cross-origin image using <canvas> &\r\n    // then export it back to an <img>.\r\n    function drawFromUrl(url, container, options) {\r\n        var draw = new qq.Promise(),\r\n            scale = options.scale,\r\n            maxSize = scale ? options.maxSize : null;\r\n\r\n        // container is an img, scaling needed\r\n        if (scale && isImg(container)) {\r\n            // Iff canvas is available in this UA, try to use it for scaling.\r\n            // Otherwise, fall back to CSS scaling\r\n            if (isCanvasSupported()) {\r\n                // Attempt to use <canvas> for image scaling,\r\n                // but we must fall back to scaling via CSS/styles\r\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\r\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\r\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\r\n                }\r\n                else {\r\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\r\n                }\r\n            }\r\n            else {\r\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\r\n            }\r\n        }\r\n        // container is a canvas, scaling optional\r\n        else if (isCanvas(container)) {\r\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\r\n        }\r\n        // container is an img & no scaling: just set the src attr to the passed url\r\n        else if (registerThumbnailRenderedListener(container, draw)) {\r\n            container.src = url;\r\n        }\r\n\r\n        return draw;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\r\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\r\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\r\n         *\r\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\r\n         * @param container <img> or <canvas> to contain the preview\r\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\r\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\r\n         */\r\n        generate: function(fileBlobOrUrl, container, options) {\r\n            if (qq.isString(fileBlobOrUrl)) {\r\n                log(\"Attempting to update thumbnail based on server response.\");\r\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\r\n            }\r\n            else {\r\n                log(\"Attempting to draw client-side image preview.\");\r\n                return draw(fileBlobOrUrl, container, options || {});\r\n            }\r\n        }\r\n    });\r\n\r\n    /*<testing>*/\r\n    this._testing = {};\r\n    this._testing.isImg = isImg;\r\n    this._testing.isCanvas = isCanvas;\r\n    this._testing.isCrossOrigin = isCrossOrigin;\r\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\r\n    /*</testing>*/\r\n};\r\n","/*globals qq */\r\n/**\r\n * EXIF image data parser.  Currently only parses the Orientation tag value,\r\n * but this may be expanded to other tags in the future.\r\n *\r\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\r\n * @constructor\r\n */\r\nqq.Exif = function(fileOrBlob, log) {\r\n    \"use strict\";\r\n\r\n    // Orientation is the only tag parsed here at this time.\r\n    var TAG_IDS = [274],\r\n        TAG_INFO = {\r\n            274: {\r\n                name: \"Orientation\",\r\n                bytes: 2\r\n            }\r\n        };\r\n\r\n    // Convert a little endian (hex string) to big endian (decimal).\r\n    function parseLittleEndian(hex) {\r\n        var result = 0,\r\n            pow = 0;\r\n\r\n        while (hex.length > 0) {\r\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\r\n            hex = hex.substring(2, hex.length);\r\n            pow += 8;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Find the byte offset, of Application Segment 1 (EXIF).\r\n    // External callers need not supply any arguments.\r\n    function seekToApp1(offset, promise) {\r\n        var theOffset = offset,\r\n            thePromise = promise;\r\n        if (theOffset === undefined) {\r\n            theOffset = 2;\r\n            thePromise = new qq.Promise();\r\n        }\r\n\r\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\r\n            var match = /^ffe([0-9])/.exec(hex),\r\n                segmentLength;\r\n\r\n            if (match) {\r\n                if (match[1] !== \"1\") {\r\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\r\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\r\n                }\r\n                else {\r\n                    thePromise.success(theOffset);\r\n                }\r\n            }\r\n            else {\r\n                thePromise.failure(\"No EXIF header to be found!\");\r\n            }\r\n        });\r\n\r\n        return thePromise;\r\n    }\r\n\r\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\r\n    function getApp1Offset() {\r\n        var promise = new qq.Promise();\r\n\r\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\r\n            if (hex.indexOf(\"ffd8\") !== 0) {\r\n                promise.failure(\"Not a valid JPEG!\");\r\n            }\r\n            else {\r\n                seekToApp1().then(function(offset) {\r\n                    promise.success(offset);\r\n                },\r\n                function(error) {\r\n                    promise.failure(error);\r\n                });\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // Determine the byte ordering of the EXIF header.\r\n    function isLittleEndian(app1Start) {\r\n        var promise = new qq.Promise();\r\n\r\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\r\n            promise.success(hex === \"4949\");\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // Determine the number of directory entries in the EXIF header.\r\n    function getDirEntryCount(app1Start, littleEndian) {\r\n        var promise = new qq.Promise();\r\n\r\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\r\n            if (littleEndian) {\r\n                return promise.success(parseLittleEndian(hex));\r\n            }\r\n            else {\r\n                promise.success(parseInt(hex, 16));\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // Get the IFD portion of the EXIF header as a hex string.\r\n    function getIfd(app1Start, dirEntries) {\r\n        var offset = app1Start + 20,\r\n            bytes = dirEntries * 12;\r\n\r\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\r\n    }\r\n\r\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\r\n    function getDirEntries(ifdHex) {\r\n        var entries = [],\r\n            offset = 0;\r\n\r\n        while (offset + 24 <= ifdHex.length) {\r\n            entries.push(ifdHex.slice(offset, offset + 24));\r\n            offset += 24;\r\n        }\r\n\r\n        return entries;\r\n    }\r\n\r\n    // Obtain values for all relevant tags and return them.\r\n    function getTagValues(littleEndian, dirEntries) {\r\n        var TAG_VAL_OFFSET = 16,\r\n            tagsToFind = qq.extend([], TAG_IDS),\r\n            vals = {};\r\n\r\n        qq.each(dirEntries, function(idx, entry) {\r\n            var idHex = entry.slice(0, 4),\r\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\r\n                tagsToFindIdx = tagsToFind.indexOf(id),\r\n                tagValHex, tagName, tagValLength;\r\n\r\n            if (tagsToFindIdx >= 0) {\r\n                tagName = TAG_INFO[id].name;\r\n                tagValLength = TAG_INFO[id].bytes;\r\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\r\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\r\n\r\n                tagsToFind.splice(tagsToFindIdx, 1);\r\n            }\r\n\r\n            if (tagsToFind.length === 0) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return vals;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\r\n         *\r\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\r\n         * If successful, the parsed EXIF header as an object will be included.\r\n         */\r\n        parse: function() {\r\n            var parser = new qq.Promise(),\r\n                onParseFailure = function(message) {\r\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\r\n                    parser.failure(message);\r\n                };\r\n\r\n            getApp1Offset().then(function(app1Offset) {\r\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\r\n\r\n                isLittleEndian(app1Offset).then(function(littleEndian) {\r\n\r\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\r\n\r\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\r\n\r\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\r\n\r\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\r\n                            var dirEntries = getDirEntries(ifdHex),\r\n                                tagValues = getTagValues(littleEndian, dirEntries);\r\n\r\n                            log(\"Successfully parsed some EXIF tags\");\r\n\r\n                            parser.success(tagValues);\r\n                        }, onParseFailure);\r\n                    }, onParseFailure);\r\n                }, onParseFailure);\r\n            }, onParseFailure);\r\n\r\n            return parser;\r\n        }\r\n    });\r\n\r\n    /*<testing>*/\r\n    this._testing = {};\r\n    this._testing.parseLittleEndian = parseLittleEndian;\r\n    /*</testing>*/\r\n};\r\n","/*globals qq */\r\nqq.Identify = function(fileOrBlob, log) {\r\n    \"use strict\";\r\n\r\n    function isIdentifiable(magicBytes, questionableBytes) {\r\n        var identifiable = false,\r\n            magicBytesEntries = [].concat(magicBytes);\r\n\r\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\r\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\r\n                identifiable = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return identifiable;\r\n    }\r\n\r\n    qq.extend(this, {\r\n        /**\r\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\r\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\r\n         * file, we will examine the blob's type attribute to save CPU cycles.\r\n         *\r\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\r\n         * If successful, the MIME string is passed to the success handler.\r\n         */\r\n        isPreviewable: function() {\r\n            var self = this,\r\n                identifier = new qq.Promise(),\r\n                previewable = false,\r\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\r\n\r\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\r\n\r\n            log(\"First pass: check type attribute of blob object.\");\r\n\r\n            if (this.isPreviewableSync()) {\r\n                log(\"Second pass: check for magic bytes in file header.\");\r\n\r\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\r\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\r\n                        if (isIdentifiable(bytes, hex)) {\r\n                            // Safari is the only supported browser that can deal with TIFFs natively,\r\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\r\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\r\n                                previewable = true;\r\n                                identifier.success(mime);\r\n                            }\r\n\r\n                            return false;\r\n                        }\r\n                    });\r\n\r\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\r\n\r\n                    if (!previewable) {\r\n                        identifier.failure();\r\n                    }\r\n                },\r\n                function() {\r\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\r\n                    identifier.failure();\r\n                });\r\n            }\r\n            else {\r\n                identifier.failure();\r\n            }\r\n\r\n            return identifier;\r\n        },\r\n\r\n        /**\r\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\r\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\r\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\r\n         * file's magic bytes.\r\n         *\r\n         * @returns {Boolean} true if the blob can be rendered in the current browser\r\n         */\r\n        isPreviewableSync: function() {\r\n            var fileMime = fileOrBlob.type,\r\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\r\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\r\n                previewable = false,\r\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\r\n\r\n            if (isRecognizedImage) {\r\n                if (fileMime === \"image/tiff\") {\r\n                    previewable = qq.supportedFeatures.tiffPreviews;\r\n                }\r\n                else {\r\n                    previewable = true;\r\n                }\r\n            }\r\n\r\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\r\n\r\n            return previewable;\r\n        }\r\n    });\r\n};\r\n\r\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\r\n    \"image/jpeg\": \"ffd8ff\",\r\n    \"image/gif\": \"474946\",\r\n    \"image/png\": \"89504e\",\r\n    \"image/bmp\": \"424d\",\r\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Attempts to validate an image, wherever possible.\r\n *\r\n * @param blob File or Blob representing a user-selecting image.\r\n * @param log Uses this to post log messages to the console.\r\n * @constructor\r\n */\r\nqq.ImageValidation = function(blob, log) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * @param limits Object with possible image-related limits to enforce.\r\n     * @returns {boolean} true if at least one of the limits has a non-zero value\r\n     */\r\n    function hasNonZeroLimits(limits) {\r\n        var atLeastOne = false;\r\n\r\n        qq.each(limits, function(limit, value) {\r\n            if (value > 0) {\r\n                atLeastOne = true;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return atLeastOne;\r\n    }\r\n\r\n    /**\r\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\r\n     * Otherwise, `success` is called on the returned promise with an object containing\r\n     * `width` and `height` properties.\r\n     */\r\n    function getWidthHeight() {\r\n        var sizeDetermination = new qq.Promise();\r\n\r\n        new qq.Identify(blob, log).isPreviewable().then(function() {\r\n            var image = new Image(),\r\n                url = window.URL && window.URL.createObjectURL ? window.URL :\r\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\r\n                      null;\r\n\r\n            if (url) {\r\n                image.onerror = function() {\r\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\r\n                    sizeDetermination.failure();\r\n                };\r\n\r\n                image.onload = function() {\r\n                    sizeDetermination.success({\r\n                        width: this.width,\r\n                        height: this.height\r\n                    });\r\n                };\r\n\r\n                image.src = url.createObjectURL(blob);\r\n            }\r\n            else {\r\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\r\n                sizeDetermination.failure();\r\n            }\r\n        }, sizeDetermination.failure);\r\n\r\n        return sizeDetermination;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param limits Object with possible image-related limits to enforce.\r\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\r\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\r\n     */\r\n    function getFailingLimit(limits, dimensions) {\r\n        var failingLimit;\r\n\r\n        qq.each(limits, function(limitName, limitValue) {\r\n            if (limitValue > 0) {\r\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\r\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\r\n                    actualValue = dimensions[dimensionPropName];\r\n\r\n                /*jshint -W015*/\r\n                switch (limitMatcher[1]) {\r\n                    case \"min\":\r\n                        if (actualValue < limitValue) {\r\n                            failingLimit = limitName;\r\n                            return false;\r\n                        }\r\n                        break;\r\n                    case \"max\":\r\n                        if (actualValue > limitValue) {\r\n                            failingLimit = limitName;\r\n                            return false;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n\r\n        return failingLimit;\r\n    }\r\n\r\n    /**\r\n     * Validate the associated blob.\r\n     *\r\n     * @param limits\r\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\r\n     * if the blob is not an image, or if the image is not verifiable.\r\n     * Otherwise, `failure` with the name of the failing limit.\r\n     */\r\n    this.validate = function(limits) {\r\n        var validationEffort = new qq.Promise();\r\n\r\n        log(\"Attempting to validate image.\");\r\n\r\n        if (hasNonZeroLimits(limits)) {\r\n            getWidthHeight().then(function(dimensions) {\r\n                var failingLimit = getFailingLimit(limits, dimensions);\r\n\r\n                if (failingLimit) {\r\n                    validationEffort.failure(failingLimit);\r\n                }\r\n                else {\r\n                    validationEffort.success();\r\n                }\r\n            }, validationEffort.success);\r\n        }\r\n        else {\r\n            validationEffort.success();\r\n        }\r\n\r\n        return validationEffort;\r\n    };\r\n};\r\n","/* globals qq */\r\n/**\r\n * Module used to control populating the initial list of files.\r\n *\r\n * @constructor\r\n */\r\nqq.Session = function(spec) {\r\n    \"use strict\";\r\n\r\n    var options = {\r\n        endpoint: null,\r\n        params: {},\r\n        customHeaders: {},\r\n        cors: {},\r\n        addFileRecord: function(sessionData) {},\r\n        log: function(message, level) {}\r\n    };\r\n\r\n    qq.extend(options, spec, true);\r\n\r\n    function isJsonResponseValid(response) {\r\n        if (qq.isArray(response)) {\r\n            return true;\r\n        }\r\n\r\n        options.log(\"Session response is not an array.\", \"error\");\r\n    }\r\n\r\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\r\n        var someItemsIgnored = false;\r\n\r\n        success = success && isJsonResponseValid(fileItems);\r\n\r\n        if (success) {\r\n            qq.each(fileItems, function(idx, fileItem) {\r\n                /* jshint eqnull:true */\r\n                if (fileItem.uuid == null) {\r\n                    someItemsIgnored = true;\r\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\r\n                }\r\n                else if (fileItem.name == null) {\r\n                    someItemsIgnored = true;\r\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\r\n                }\r\n                else {\r\n                    try {\r\n                        options.addFileRecord(fileItem);\r\n                        return true;\r\n                    }\r\n                    catch (err) {\r\n                        someItemsIgnored = true;\r\n                        options.log(err.message, \"error\");\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\r\n    }\r\n\r\n    // Initiate a call to the server that will be used to populate the initial file list.\r\n    // Returns a `qq.Promise`.\r\n    this.refresh = function() {\r\n        /*jshint indent:false */\r\n        var refreshEffort = new qq.Promise(),\r\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\r\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\r\n            },\r\n            requesterOptions = qq.extend({}, options),\r\n            requester = new qq.SessionAjaxRequester(\r\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\r\n            );\r\n\r\n        requester.queryServer();\r\n\r\n        return refreshEffort;\r\n    };\r\n};\r\n","/*globals qq, XMLHttpRequest*/\r\n/**\r\n * Thin module used to send GET requests to the server, expecting information about session\r\n * data used to initialize an uploader instance.\r\n *\r\n * @param spec Various options used to influence the associated request.\r\n * @constructor\r\n */\r\nqq.SessionAjaxRequester = function(spec) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        options = {\r\n            endpoint: null,\r\n            customHeaders: {},\r\n            params: {},\r\n            cors: {\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            onComplete: function(response, success, xhrOrXdr) {},\r\n            log: function(str, level) {}\r\n        };\r\n\r\n    qq.extend(options, spec);\r\n\r\n    function onComplete(id, xhrOrXdr, isError) {\r\n        var response = null;\r\n\r\n        /* jshint eqnull:true */\r\n        if (xhrOrXdr.responseText != null) {\r\n            try {\r\n                response = qq.parseJson(xhrOrXdr.responseText);\r\n            }\r\n            catch (err) {\r\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\r\n                isError = true;\r\n            }\r\n        }\r\n\r\n        options.onComplete(response, !isError, xhrOrXdr);\r\n    }\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        validMethods: [\"GET\"],\r\n        method: \"GET\",\r\n        endpointStore: {\r\n            get: function() {\r\n                return options.endpoint;\r\n            }\r\n        },\r\n        customHeaders: options.customHeaders,\r\n        log: options.log,\r\n        onComplete: onComplete,\r\n        cors: options.cors\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        queryServer: function() {\r\n            var params = qq.extend({}, options.params);\r\n\r\n            options.log(\"Session query request.\");\r\n\r\n            requester.initTransport(\"sessionRefresh\")\r\n                .withParams(params)\r\n                .withCacheBuster()\r\n                .send();\r\n        }\r\n    });\r\n};\r\n","/* globals qq, ExifRestorer */\r\n/**\r\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\r\n * Scaled images are generated and converted to blobs on-demand.\r\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\r\n *\r\n * @param spec Information about the scaled images to generate.\r\n * @param log Logger instance\r\n * @constructor\r\n */\r\nqq.Scaler = function(spec, log) {\r\n    \"use strict\";\r\n\r\n    var self = this,\r\n        customResizeFunction = spec.customResizer,\r\n        includeOriginal = spec.sendOriginal,\r\n        orient = spec.orient,\r\n        defaultType = spec.defaultType,\r\n        defaultQuality = spec.defaultQuality / 100,\r\n        failedToScaleText = spec.failureText,\r\n        includeExif = spec.includeExif,\r\n        sizes = this._getSortedSizes(spec.sizes);\r\n\r\n    // Revealed API for instances of this module\r\n    qq.extend(this, {\r\n        // If no targeted sizes have been declared or if this browser doesn't support\r\n        // client-side image preview generation, there is no scaling to do.\r\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\r\n\r\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\r\n            var self = this,\r\n                records = [],\r\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\r\n                identifier = new qq.Identify(originalBlob, log);\r\n\r\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\r\n            if (identifier.isPreviewableSync()) {\r\n                // Create records for each scaled version & add them to the records array, smallest first.\r\n                qq.each(sizes, function(idx, sizeRecord) {\r\n                    var outputType = self._determineOutputType({\r\n                        defaultType: defaultType,\r\n                        requestedType: sizeRecord.type,\r\n                        refType: originalBlob.type\r\n                    });\r\n\r\n                    records.push({\r\n                        uuid: qq.getUniqueId(),\r\n                        name: self._getName(originalFileName, {\r\n                            name: sizeRecord.name,\r\n                            type: outputType,\r\n                            refType: originalBlob.type\r\n                        }),\r\n                        blob: new qq.BlobProxy(originalBlob,\r\n                        qq.bind(self._generateScaledImage, self, {\r\n                            customResizeFunction: customResizeFunction,\r\n                            maxSize: sizeRecord.maxSize,\r\n                            orient: orient,\r\n                            type: outputType,\r\n                            quality: defaultQuality,\r\n                            failedText: failedToScaleText,\r\n                            includeExif: includeExif,\r\n                            log: log\r\n                        }))\r\n                    });\r\n                });\r\n\r\n                records.push({\r\n                    uuid: originalFileUuid,\r\n                    name: originalFileName,\r\n                    size: originalBlob.size,\r\n                    blob: includeOriginal ? originalBlob : null\r\n                });\r\n            }\r\n            else {\r\n                records.push({\r\n                    uuid: originalFileUuid,\r\n                    name: originalFileName,\r\n                    size: originalBlob.size,\r\n                    blob: originalBlob\r\n                });\r\n            }\r\n\r\n            return records;\r\n        },\r\n\r\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\r\n            var self = this,\r\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\r\n                scaledIds = [],\r\n                originalId = null,\r\n                addFileToHandler = api.addFileToHandler,\r\n                uploadData = api.uploadData,\r\n                paramsStore = api.paramsStore,\r\n                proxyGroupId = qq.getUniqueId();\r\n\r\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\r\n                var blobSize = record.size,\r\n                    id;\r\n\r\n                if (record.blob instanceof qq.BlobProxy) {\r\n                    blobSize = -1;\r\n                }\r\n\r\n                id = uploadData.addFile({\r\n                    uuid: record.uuid,\r\n                    name: record.name,\r\n                    size: blobSize,\r\n                    batchId: batchId,\r\n                    proxyGroupId: proxyGroupId\r\n                });\r\n\r\n                if (record.blob instanceof qq.BlobProxy) {\r\n                    scaledIds.push(id);\r\n                }\r\n                else {\r\n                    originalId = id;\r\n                }\r\n\r\n                if (record.blob) {\r\n                    addFileToHandler(id, record.blob);\r\n                    fileList.push({id: id, file: record.blob});\r\n                }\r\n                else {\r\n                    uploadData.setStatus(id, qq.status.REJECTED);\r\n                }\r\n            });\r\n\r\n            // If we are potentially uploading an original file and some scaled versions,\r\n            // ensure the scaled versions include reference's to the parent's UUID and size\r\n            // in their associated upload requests.\r\n            if (originalId !== null) {\r\n                qq.each(scaledIds, function(idx, scaledId) {\r\n                    var params = {\r\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\r\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\r\n                    };\r\n\r\n                    // Make sure the UUID for each scaled image is sent with the upload request,\r\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\r\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\r\n\r\n                    uploadData.setParentId(scaledId, originalId);\r\n                    paramsStore.addReadOnly(scaledId, params);\r\n                });\r\n\r\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\r\n                // parameter as well.\r\n                if (scaledIds.length) {\r\n                    (function() {\r\n                        var param = {};\r\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\r\n                        paramsStore.addReadOnly(originalId, param);\r\n                    }());\r\n                }\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nqq.extend(qq.Scaler.prototype, {\r\n    scaleImage: function(id, specs, api) {\r\n        \"use strict\";\r\n\r\n        if (!qq.supportedFeatures.scaling) {\r\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\r\n        }\r\n\r\n        var scalingEffort = new qq.Promise(),\r\n            log = api.log,\r\n            file = api.getFile(id),\r\n            uploadData = api.uploadData.retrieve({id: id}),\r\n            name = uploadData && uploadData.name,\r\n            uuid = uploadData && uploadData.uuid,\r\n            scalingOptions = {\r\n                customResizer: specs.customResizer,\r\n                sendOriginal: false,\r\n                orient: specs.orient,\r\n                defaultType: specs.type || null,\r\n                defaultQuality: specs.quality,\r\n                failedToScaleText: \"Unable to scale\",\r\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\r\n            },\r\n            scaler = new qq.Scaler(scalingOptions, log);\r\n\r\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\r\n            scalingEffort.failure();\r\n\r\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\r\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\r\n        }\r\n        else {\r\n            (qq.bind(function() {\r\n                // Assumption: There will never be more than one record\r\n                var record = scaler.getFileRecords(uuid, name, file)[0];\r\n\r\n                if (record && record.blob instanceof qq.BlobProxy) {\r\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\r\n                }\r\n                else {\r\n                    log(id + \" is not a scalable image!\", \"error\");\r\n                    scalingEffort.failure();\r\n                }\r\n            }, this)());\r\n        }\r\n\r\n        return scalingEffort;\r\n    },\r\n\r\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\r\n    // image/jpeg and image/png are the only safe choices at this time.\r\n    _determineOutputType: function(spec) {\r\n        \"use strict\";\r\n\r\n        var requestedType = spec.requestedType,\r\n            defaultType = spec.defaultType,\r\n            referenceType = spec.refType;\r\n\r\n        // If a default type and requested type have not been specified, this should be a\r\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\r\n        if (!defaultType && !requestedType) {\r\n            if (referenceType !== \"image/jpeg\") {\r\n                return \"image/png\";\r\n            }\r\n            return referenceType;\r\n        }\r\n\r\n        // A specified default type is used when a requested type is not specified.\r\n        if (!requestedType) {\r\n            return defaultType;\r\n        }\r\n\r\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\r\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\r\n            if (requestedType === \"image/tiff\") {\r\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\r\n            }\r\n\r\n            return requestedType;\r\n        }\r\n\r\n        return defaultType;\r\n    },\r\n\r\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\r\n    _getName: function(originalName, scaledVersionProperties) {\r\n        \"use strict\";\r\n\r\n        var startOfExt = originalName.lastIndexOf(\".\"),\r\n            versionType = scaledVersionProperties.type || \"image/png\",\r\n            referenceType = scaledVersionProperties.refType,\r\n            scaledName = \"\",\r\n            scaledExt = qq.getExtension(originalName),\r\n            nameAppendage = \"\";\r\n\r\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\r\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\r\n        }\r\n\r\n        if (startOfExt >= 0) {\r\n            scaledName = originalName.substr(0, startOfExt);\r\n\r\n            if (referenceType !== versionType) {\r\n                scaledExt = versionType.split(\"/\")[1];\r\n            }\r\n\r\n            scaledName += nameAppendage + \".\" + scaledExt;\r\n        }\r\n        else {\r\n            scaledName = originalName + nameAppendage;\r\n        }\r\n\r\n        return scaledName;\r\n    },\r\n\r\n    // We want the smallest scaled file to be uploaded first\r\n    _getSortedSizes: function(sizes) {\r\n        \"use strict\";\r\n\r\n        sizes = qq.extend([], sizes);\r\n\r\n        return sizes.sort(function(a, b) {\r\n            if (a.maxSize > b.maxSize) {\r\n                return 1;\r\n            }\r\n            if (a.maxSize < b.maxSize) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n    },\r\n\r\n    _generateScaledImage: function(spec, sourceFile) {\r\n        \"use strict\";\r\n\r\n        var self = this,\r\n            customResizeFunction = spec.customResizeFunction,\r\n            log = spec.log,\r\n            maxSize = spec.maxSize,\r\n            orient = spec.orient,\r\n            type = spec.type,\r\n            quality = spec.quality,\r\n            failedText = spec.failedText,\r\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\r\n            scalingEffort = new qq.Promise(),\r\n            imageGenerator = new qq.ImageGenerator(log),\r\n            canvas = document.createElement(\"canvas\");\r\n\r\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\r\n\r\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\r\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\r\n                signalSuccess = function() {\r\n                    log(\"Success generating scaled version for \" + sourceFile.name);\r\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\r\n                    scalingEffort.success(blob);\r\n                };\r\n\r\n            if (includeExif) {\r\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\r\n                    scaledImageDataUri = scaledImageDataUriWithExif;\r\n                    signalSuccess();\r\n                },\r\n                function() {\r\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\r\n                    signalSuccess();\r\n                });\r\n            }\r\n            else {\r\n                signalSuccess();\r\n            }\r\n        }, function() {\r\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\r\n            scalingEffort.failure(failedText);\r\n        });\r\n\r\n        return scalingEffort;\r\n    },\r\n\r\n    // Attempt to insert the original image's EXIF header into a scaled version.\r\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\r\n        \"use strict\";\r\n\r\n        var reader = new FileReader(),\r\n            insertionEffort = new qq.Promise(),\r\n            originalImageDataUri = \"\";\r\n\r\n        reader.onload = function() {\r\n            originalImageDataUri = reader.result;\r\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\r\n        };\r\n\r\n        reader.onerror = function() {\r\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\r\n            insertionEffort.failure();\r\n        };\r\n\r\n        reader.readAsDataURL(originalImage);\r\n\r\n        return insertionEffort;\r\n    },\r\n\r\n    _dataUriToBlob: function(dataUri) {\r\n        \"use strict\";\r\n\r\n        var byteString, mimeString, arrayBuffer, intArray;\r\n\r\n        // convert base64 to raw binary data held in a string\r\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\r\n            byteString = atob(dataUri.split(\",\")[1]);\r\n        }\r\n        else {\r\n            byteString = decodeURI(dataUri.split(\",\")[1]);\r\n        }\r\n\r\n        // extract the MIME\r\n        mimeString = dataUri.split(\",\")[0]\r\n            .split(\":\")[1]\r\n            .split(\";\")[0];\r\n\r\n        // write the bytes of the binary string to an ArrayBuffer\r\n        arrayBuffer = new ArrayBuffer(byteString.length);\r\n        intArray = new Uint8Array(arrayBuffer);\r\n        qq.each(byteString, function(idx, character) {\r\n            intArray[idx] = character.charCodeAt(0);\r\n        });\r\n\r\n        return this._createBlob(arrayBuffer, mimeString);\r\n    },\r\n\r\n    _createBlob: function(data, mime) {\r\n        \"use strict\";\r\n\r\n        var BlobBuilder = window.BlobBuilder ||\r\n                window.WebKitBlobBuilder ||\r\n                window.MozBlobBuilder ||\r\n                window.MSBlobBuilder,\r\n            blobBuilder = BlobBuilder && new BlobBuilder();\r\n\r\n        if (blobBuilder) {\r\n            blobBuilder.append(data);\r\n            return blobBuilder.getBlob(mime);\r\n        }\r\n        else {\r\n            return new Blob([data], {type: mime});\r\n        }\r\n    }\r\n});\r\n","//Based on MinifyJpeg\r\n//http://elicon.blog57.fc2.com/blog-entry-206.html\r\n\r\nqq.ExifRestorer = (function()\r\n{\r\n   \r\n\tvar ExifRestorer = {};\r\n\t \r\n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\r\n                         \"QRSTUVWXYZabcdef\" +\r\n                         \"ghijklmnopqrstuv\" +\r\n                         \"wxyz0123456789+/\" +\r\n                         \"=\";\r\n\r\n    ExifRestorer.encode64 = function(input)\r\n    {\r\n        var output = \"\",\r\n            chr1, chr2, chr3 = \"\",\r\n            enc1, enc2, enc3, enc4 = \"\",\r\n            i = 0;\r\n\r\n        do {\r\n            chr1 = input[i++];\r\n            chr2 = input[i++];\r\n            chr3 = input[i++];\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n               enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n               enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n               this.KEY_STR.charAt(enc1) +\r\n               this.KEY_STR.charAt(enc2) +\r\n               this.KEY_STR.charAt(enc3) +\r\n               this.KEY_STR.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    };\r\n    \r\n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\r\n    {\r\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\r\n\r\n        if (!origFileBase64.match(expectedBase64Header))\r\n        {\r\n        \treturn resizedFileBase64;\r\n        }       \r\n        \r\n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\r\n        var segments = this.slice2Segments(rawImage);\r\n                \r\n        var image = this.exifManipulation(resizedFileBase64, segments);\r\n        \r\n        return expectedBase64Header + this.encode64(image);\r\n        \r\n    };\r\n\r\n\r\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\r\n    {\r\n            var exifArray = this.getExifArray(segments),\r\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\r\n                aBuffer = new Uint8Array(newImageArray);\r\n\r\n            return aBuffer;\r\n    };\r\n\r\n\r\n    ExifRestorer.getExifArray = function(segments)\r\n    {\r\n            var seg;\r\n            for (var x = 0; x < segments.length; x++)\r\n            {\r\n                seg = segments[x];\r\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\r\n                {\r\n                    return seg;\r\n                }\r\n            }\r\n            return [];\r\n    };\r\n\r\n\r\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\r\n    {\r\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\r\n                buf = this.decode64(imageData),\r\n                separatePoint = buf.indexOf(255,3),\r\n                mae = buf.slice(0, separatePoint),\r\n                ato = buf.slice(separatePoint),\r\n                array = mae;\r\n\r\n            array = array.concat(exifArray);\r\n            array = array.concat(ato);\r\n           return array;\r\n    };\r\n\r\n\r\n    \r\n    ExifRestorer.slice2Segments = function(rawImageArray)\r\n    {\r\n        var head = 0,\r\n            segments = [];\r\n\r\n        while (1)\r\n        {\r\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\r\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\r\n            {\r\n                head += 2;\r\n            }\r\n            else\r\n            {\r\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\r\n                    endPoint = head + length + 2,\r\n                    seg = rawImageArray.slice(head, endPoint);\r\n                segments.push(seg);\r\n                head = endPoint;\r\n            }\r\n            if (head > rawImageArray.length){break;}\r\n        }\r\n\r\n        return segments;\r\n    };\r\n\r\n\r\n    \r\n    ExifRestorer.decode64 = function(input) \r\n    {\r\n        var output = \"\",\r\n            chr1, chr2, chr3 = \"\",\r\n            enc1, enc2, enc3, enc4 = \"\",\r\n            i = 0,\r\n            buf = [];\r\n\r\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n        if (base64test.exec(input)) {\r\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\r\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\r\n        }\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n        do {\r\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\r\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\r\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\r\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            buf.push(chr1);\r\n\r\n            if (enc3 != 64) {\r\n               buf.push(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n               buf.push(chr3);\r\n            }\r\n\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n\r\n        } while (i < input.length);\r\n\r\n        return buf;\r\n    };\r\n\r\n    \r\n    return ExifRestorer;\r\n})();\r\n","/* globals qq */\r\n/**\r\n * Keeps a running tally of total upload progress for a batch of files.\r\n *\r\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\r\n * @param getSize Function that returns the size of a file given its ID\r\n * @constructor\r\n */\r\nqq.TotalProgress = function(callback, getSize) {\r\n    \"use strict\";\r\n\r\n    var perFileProgress = {},\r\n        totalLoaded = 0,\r\n        totalSize = 0,\r\n\r\n        lastLoadedSent = -1,\r\n        lastTotalSent = -1,\r\n        callbackProxy = function(loaded, total) {\r\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\r\n                callback(loaded, total);\r\n            }\r\n\r\n            lastLoadedSent = loaded;\r\n            lastTotalSent = total;\r\n        },\r\n\r\n        /**\r\n         * @param failed Array of file IDs that have failed\r\n         * @param retryable Array of file IDs that are retryable\r\n         * @returns true if none of the failed files are eligible for retry\r\n         */\r\n        noRetryableFiles = function(failed, retryable) {\r\n            var none = true;\r\n\r\n            qq.each(failed, function(idx, failedId) {\r\n                if (qq.indexOf(retryable, failedId) >= 0) {\r\n                    none = false;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return none;\r\n        },\r\n\r\n        onCancel = function(id) {\r\n            updateTotalProgress(id, -1, -1);\r\n            delete perFileProgress[id];\r\n        },\r\n\r\n        onAllComplete = function(successful, failed, retryable) {\r\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\r\n                callbackProxy(totalSize, totalSize);\r\n                this.reset();\r\n            }\r\n        },\r\n\r\n        onNew = function(id) {\r\n            var size = getSize(id);\r\n\r\n            // We might not know the size yet, such as for blob proxies\r\n            if (size > 0) {\r\n                updateTotalProgress(id, 0, size);\r\n                perFileProgress[id] = {loaded: 0, total: size};\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\r\n         * be appropriate to re-calculate and disseminate this data.\r\n         *\r\n         * @param id ID of a file that has changed in some important way\r\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\r\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\r\n         */\r\n        updateTotalProgress = function(id, newLoaded, newTotal) {\r\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\r\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\r\n\r\n            if (newLoaded === -1 && newTotal === -1) {\r\n                totalLoaded -= oldLoaded;\r\n                totalSize -= oldTotal;\r\n            }\r\n            else {\r\n                if (newLoaded) {\r\n                    totalLoaded += newLoaded - oldLoaded;\r\n                }\r\n                if (newTotal) {\r\n                    totalSize += newTotal - oldTotal;\r\n                }\r\n            }\r\n\r\n            callbackProxy(totalLoaded, totalSize);\r\n        };\r\n\r\n    qq.extend(this, {\r\n        // Called when a batch of files has completed uploading.\r\n        onAllComplete: onAllComplete,\r\n\r\n        // Called when the status of a file has changed.\r\n        onStatusChange: function(id, oldStatus, newStatus) {\r\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\r\n                onCancel(id);\r\n            }\r\n            else if (newStatus === qq.status.SUBMITTING) {\r\n                onNew(id);\r\n            }\r\n        },\r\n\r\n        // Called whenever the upload progress of an individual file has changed.\r\n        onIndividualProgress: function(id, loaded, total) {\r\n            updateTotalProgress(id, loaded, total);\r\n            perFileProgress[id] = {loaded: loaded, total: total};\r\n        },\r\n\r\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\r\n        onNewSize: function(id) {\r\n            onNew(id);\r\n        },\r\n\r\n        reset: function() {\r\n            perFileProgress = {};\r\n            totalLoaded = 0;\r\n            totalSize = 0;\r\n        }\r\n    });\r\n};\r\n","/*globals qq*/\r\nqq.PasteSupport = function(o) {\r\n    \"use strict\";\r\n\r\n    var options, detachPasteHandler;\r\n\r\n    options = {\r\n        targetElement: null,\r\n        callbacks: {\r\n            log: function(message, level) {},\r\n            pasteReceived: function(blob) {}\r\n        }\r\n    };\r\n\r\n    function isImage(item) {\r\n        return item.type &&\r\n            item.type.indexOf(\"image/\") === 0;\r\n    }\r\n\r\n    function registerPasteHandler() {\r\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\r\n            var clipboardData = event.clipboardData;\r\n\r\n            if (clipboardData) {\r\n                qq.each(clipboardData.items, function(idx, item) {\r\n                    if (isImage(item)) {\r\n                        var blob = item.getAsFile();\r\n                        options.callbacks.pasteReceived(blob);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    function unregisterPasteHandler() {\r\n        if (detachPasteHandler) {\r\n            detachPasteHandler();\r\n        }\r\n    }\r\n\r\n    qq.extend(options, o);\r\n    registerPasteHandler();\r\n\r\n    qq.extend(this, {\r\n        reset: function() {\r\n            unregisterPasteHandler();\r\n        }\r\n    });\r\n};\r\n","/* globals qq */\r\n/**\r\n * Module that handles support for existing forms.\r\n *\r\n * @param options Options passed from the integrator-supplied options related to form support.\r\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\r\n * @param log Proxy for the logger\r\n * @constructor\r\n */\r\nqq.FormSupport = function(options, startUpload, log) {\r\n    \"use strict\";\r\n    var self  = this,\r\n        interceptSubmit = options.interceptSubmit,\r\n        formEl = options.element,\r\n        autoUpload = options.autoUpload;\r\n\r\n    // Available on the public API associated with this module.\r\n    qq.extend(this, {\r\n        // To be used by the caller to determine if the endpoint will be determined by some processing\r\n        // that occurs in this module, such as if the form has an action attribute.\r\n        // Ignore if `attachToForm === false`.\r\n        newEndpoint: null,\r\n\r\n        // To be used by the caller to determine if auto uploading should be allowed.\r\n        // Ignore if `attachToForm === false`.\r\n        newAutoUpload: autoUpload,\r\n\r\n        // true if a form was detected and is being tracked by this module\r\n        attachedToForm: false,\r\n\r\n        // Returns an object with names and values for all valid form elements associated with the attached form.\r\n        getFormInputsAsObject: function() {\r\n            /* jshint eqnull:true */\r\n            if (formEl == null) {\r\n                return null;\r\n            }\r\n\r\n            return self._form2Obj(formEl);\r\n        }\r\n    });\r\n\r\n    // If the form contains an action attribute, this should be the new upload endpoint.\r\n    function determineNewEndpoint(formEl) {\r\n        if (formEl.getAttribute(\"action\")) {\r\n            self.newEndpoint = formEl.getAttribute(\"action\");\r\n        }\r\n    }\r\n\r\n    // Return true only if the form is valid, or if we cannot make this determination.\r\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\r\n    function validateForm(formEl, nativeSubmit) {\r\n        if (formEl.checkValidity && !formEl.checkValidity()) {\r\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\r\n            nativeSubmit();\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\r\n    function maybeUploadOnSubmit(formEl) {\r\n        var nativeSubmit = formEl.submit;\r\n\r\n        // Intercept and squelch submit events.\r\n        qq(formEl).attach(\"submit\", function(event) {\r\n            event = event || window.event;\r\n\r\n            if (event.preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n            else {\r\n                event.returnValue = false;\r\n            }\r\n\r\n            validateForm(formEl, nativeSubmit) && startUpload();\r\n        });\r\n\r\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\r\n        // Intercept that too.\r\n        formEl.submit = function() {\r\n            validateForm(formEl, nativeSubmit) && startUpload();\r\n        };\r\n    }\r\n\r\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\r\n    // The rest of the code in this module depends on this being an HTMLElement.\r\n    function determineFormEl(formEl) {\r\n        if (formEl) {\r\n            if (qq.isString(formEl)) {\r\n                formEl = document.getElementById(formEl);\r\n            }\r\n\r\n            if (formEl) {\r\n                log(\"Attaching to form element.\");\r\n                determineNewEndpoint(formEl);\r\n                interceptSubmit && maybeUploadOnSubmit(formEl);\r\n            }\r\n        }\r\n\r\n        return formEl;\r\n    }\r\n\r\n    formEl = determineFormEl(formEl);\r\n    this.attachedToForm = !!formEl;\r\n};\r\n\r\nqq.extend(qq.FormSupport.prototype, {\r\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\r\n    // construct from a given form when the form is submitted.\r\n    _form2Obj: function(form) {\r\n        \"use strict\";\r\n        var obj = {},\r\n            notIrrelevantType = function(type) {\r\n                var irrelevantTypes = [\r\n                    \"button\",\r\n                    \"image\",\r\n                    \"reset\",\r\n                    \"submit\"\r\n                ];\r\n\r\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\r\n            },\r\n            radioOrCheckbox = function(type) {\r\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\r\n            },\r\n            ignoreValue = function(el) {\r\n                if (radioOrCheckbox(el.type) && !el.checked) {\r\n                    return true;\r\n                }\r\n\r\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\r\n            },\r\n            selectValue = function(select) {\r\n                var value = null;\r\n\r\n                qq.each(qq(select).children(), function(idx, child) {\r\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\r\n                        value = child.value;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return value;\r\n            };\r\n\r\n        qq.each(form.elements, function(idx, el) {\r\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\r\n                notIrrelevantType(el.type) &&\r\n                !ignoreValue(el)) {\r\n\r\n                obj[el.name] = el.value;\r\n            }\r\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\r\n                var value = selectValue(el);\r\n\r\n                if (value !== null) {\r\n                    obj[el.name] = value;\r\n                }\r\n            }\r\n        });\r\n\r\n        return obj;\r\n    }\r\n});\r\n","/*globals qq*/\r\n/**\r\n * Upload handler used that assumes the current user agent does not have any support for the\r\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\r\n * a generic server.\r\n *\r\n * @param options Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\nqq.traditional = qq.traditional || {};\r\nqq.traditional.FormUploadHandler = function(options, proxy) {\r\n    \"use strict\";\r\n\r\n    var handler = this,\r\n        getName = proxy.getName,\r\n        getUuid = proxy.getUuid,\r\n        log = proxy.log;\r\n\r\n    /**\r\n     * Returns json object received by iframe from server.\r\n     */\r\n    function getIframeContentJson(id, iframe) {\r\n        /*jshint evil: true*/\r\n\r\n        var response, doc, innerHtml;\r\n\r\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\r\n        try {\r\n            // iframe.contentWindow.document - for IE<7\r\n            doc = iframe.contentDocument || iframe.contentWindow.document;\r\n            innerHtml = doc.body.innerHTML;\r\n\r\n            log(\"converting iframe's innerHTML to JSON\");\r\n            log(\"innerHTML = \" + innerHtml);\r\n            //plain text response may be wrapped in <pre> tag\r\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\r\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\r\n            }\r\n\r\n            response = handler._parseJsonResponse(innerHtml);\r\n        }\r\n        catch (error) {\r\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\r\n            response = {success: false};\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Creates form, that will be submitted to iframe\r\n     */\r\n    function createForm(id, iframe) {\r\n        var params = options.paramsStore.get(id),\r\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\r\n            endpoint = options.endpointStore.get(id),\r\n            name = getName(id);\r\n\r\n        params[options.uuidName] = getUuid(id);\r\n        params[options.filenameParam] = name;\r\n\r\n        return handler._initFormForUpload({\r\n            method: method,\r\n            endpoint: endpoint,\r\n            params: params,\r\n            paramsInBody: options.paramsInBody,\r\n            targetName: iframe.name\r\n        });\r\n    }\r\n\r\n    this.uploadFile = function(id) {\r\n        var input = handler.getInput(id),\r\n            iframe = handler._createIframe(id),\r\n            promise = new qq.Promise(),\r\n            form;\r\n\r\n        form = createForm(id, iframe);\r\n        form.appendChild(input);\r\n\r\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\r\n            log(\"iframe loaded\");\r\n\r\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\r\n\r\n            handler._detachLoadEvent(id);\r\n\r\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\r\n            if (!options.cors.expected) {\r\n                qq(iframe).remove();\r\n            }\r\n\r\n            if (response.success) {\r\n                promise.success(response);\r\n            }\r\n            else {\r\n                promise.failure(response);\r\n            }\r\n        });\r\n\r\n        log(\"Sending upload request for \" + id);\r\n        form.submit();\r\n        qq(form).remove();\r\n\r\n        return promise;\r\n    };\r\n\r\n    qq.extend(this, new qq.FormUploadHandler({\r\n        options: {\r\n            isCors: options.cors.expected,\r\n            inputName: options.inputName\r\n        },\r\n\r\n        proxy: {\r\n            onCancel: options.onCancel,\r\n            getName: getName,\r\n            getUuid: getUuid,\r\n            log: log\r\n        }\r\n    }));\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\r\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\r\n *\r\n * @param spec Options passed from the base handler\r\n * @param proxy Callbacks & methods used to query for or push out data/changes\r\n */\r\nqq.traditional = qq.traditional || {};\r\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\r\n    \"use strict\";\r\n\r\n    var handler = this,\r\n        getName = proxy.getName,\r\n        getSize = proxy.getSize,\r\n        getUuid = proxy.getUuid,\r\n        log = proxy.log,\r\n        multipart = spec.forceMultipart || spec.paramsInBody,\r\n\r\n        addChunkingSpecificParams = function(id, params, chunkData) {\r\n            var size = getSize(id),\r\n                name = getName(id);\r\n\r\n            params[spec.chunking.paramNames.partIndex] = chunkData.part;\r\n            params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\r\n            params[spec.chunking.paramNames.chunkSize] = chunkData.size;\r\n            params[spec.chunking.paramNames.totalParts] = chunkData.count;\r\n            params[spec.totalFileSizeName] = size;\r\n\r\n            /**\r\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\r\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\r\n             */\r\n            if (multipart) {\r\n                params[spec.filenameParam] = name;\r\n            }\r\n        },\r\n\r\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\r\n            cors: spec.cors,\r\n            endpoint: spec.chunking.success.endpoint,\r\n            log: log\r\n        }),\r\n\r\n        createReadyStateChangedHandler = function(id, xhr) {\r\n            var promise = new qq.Promise();\r\n\r\n            xhr.onreadystatechange = function() {\r\n                if (xhr.readyState === 4) {\r\n                    var result = onUploadOrChunkComplete(id, xhr);\r\n\r\n                    if (result.success) {\r\n                        promise.success(result.response, xhr);\r\n                    }\r\n                    else {\r\n                        promise.failure(result.response, xhr);\r\n                    }\r\n                }\r\n            };\r\n\r\n            return promise;\r\n        },\r\n\r\n        getChunksCompleteParams = function(id) {\r\n            var params = spec.paramsStore.get(id),\r\n                name = getName(id),\r\n                size = getSize(id);\r\n\r\n            params[spec.uuidName] = getUuid(id);\r\n            params[spec.filenameParam] = name;\r\n            params[spec.totalFileSizeName] = size;\r\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\r\n\r\n            return params;\r\n        },\r\n\r\n        isErrorUploadResponse = function(xhr, response) {\r\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\r\n                !response.success ||\r\n                response.reset;\r\n        },\r\n\r\n        onUploadOrChunkComplete = function(id, xhr) {\r\n            var response;\r\n\r\n            log(\"xhr - server response received for \" + id);\r\n            log(\"responseText = \" + xhr.responseText);\r\n\r\n            response = parseResponse(true, xhr);\r\n\r\n            return {\r\n                success: !isErrorUploadResponse(xhr, response),\r\n                response: response\r\n            };\r\n        },\r\n\r\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\r\n        parseResponse = function(upload, xhr) {\r\n            var response = {};\r\n\r\n            try {\r\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\r\n                response = qq.parseJson(xhr.responseText);\r\n            }\r\n            catch (error) {\r\n                upload && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\r\n            }\r\n\r\n            return response;\r\n        },\r\n\r\n        sendChunksCompleteRequest = function(id) {\r\n            var promise = new qq.Promise();\r\n\r\n            allChunksDoneRequester.complete(\r\n                    id,\r\n                    handler._createXhr(id),\r\n                    getChunksCompleteParams(id),\r\n                    spec.customHeaders.get(id)\r\n                )\r\n                .then(function(xhr) {\r\n                    promise.success(parseResponse(false, xhr), xhr);\r\n                }, function(xhr) {\r\n                    promise.failure(parseResponse(false, xhr), xhr);\r\n                });\r\n\r\n            return promise;\r\n        },\r\n\r\n        setParamsAndGetEntityToSend = function(params, xhr, fileOrBlob, id) {\r\n            var formData = new FormData(),\r\n                method = spec.method,\r\n                endpoint = spec.endpointStore.get(id),\r\n                name = getName(id),\r\n                size = getSize(id);\r\n\r\n            params[spec.uuidName] = getUuid(id);\r\n            params[spec.filenameParam] = name;\r\n\r\n            if (multipart) {\r\n                params[spec.totalFileSizeName] = size;\r\n            }\r\n\r\n            //build query string\r\n            if (!spec.paramsInBody) {\r\n                if (!multipart) {\r\n                    params[spec.inputName] = name;\r\n                }\r\n                endpoint = qq.obj2url(params, endpoint);\r\n            }\r\n\r\n            xhr.open(method, endpoint, true);\r\n\r\n            if (spec.cors.expected && spec.cors.sendCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n\r\n            if (multipart) {\r\n                if (spec.paramsInBody) {\r\n                    qq.obj2FormData(params, formData);\r\n                }\r\n\r\n                formData.append(spec.inputName, fileOrBlob);\r\n                return formData;\r\n            }\r\n\r\n            return fileOrBlob;\r\n        },\r\n\r\n        setUploadHeaders = function(id, xhr) {\r\n            var extraHeaders = spec.customHeaders.get(id),\r\n                fileOrBlob = handler.getFile(id);\r\n\r\n            xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n\r\n            if (!multipart) {\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\r\n                xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\r\n            }\r\n\r\n            qq.each(extraHeaders, function(name, val) {\r\n                xhr.setRequestHeader(name, val);\r\n            });\r\n        };\r\n\r\n    qq.extend(this, {\r\n        uploadChunk: function(id, chunkIdx, resuming) {\r\n            var chunkData = handler._getChunkData(id, chunkIdx),\r\n                xhr = handler._createXhr(id, chunkIdx),\r\n                size = getSize(id),\r\n                promise, toSend, params;\r\n\r\n            promise = createReadyStateChangedHandler(id, xhr);\r\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\r\n            params = spec.paramsStore.get(id);\r\n            addChunkingSpecificParams(id, params, chunkData);\r\n\r\n            if (resuming) {\r\n                params[spec.resume.paramNames.resuming] = true;\r\n            }\r\n\r\n            toSend = setParamsAndGetEntityToSend(params, xhr, chunkData.blob, id);\r\n            setUploadHeaders(id, xhr);\r\n            xhr.send(toSend);\r\n\r\n            return promise;\r\n        },\r\n\r\n        uploadFile: function(id) {\r\n            var fileOrBlob = handler.getFile(id),\r\n                promise, xhr, params, toSend;\r\n\r\n            xhr = handler._createXhr(id);\r\n            handler._registerProgressHandler(id);\r\n            promise = createReadyStateChangedHandler(id, xhr);\r\n            params = spec.paramsStore.get(id);\r\n            toSend = setParamsAndGetEntityToSend(params, xhr, fileOrBlob, id);\r\n            setUploadHeaders(id, xhr);\r\n            xhr.send(toSend);\r\n\r\n            return promise;\r\n        }\r\n    });\r\n\r\n    qq.extend(this, new qq.XhrUploadHandler({\r\n        options: qq.extend({namespace: \"traditional\"}, spec),\r\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\r\n    }));\r\n\r\n    qq.override(this, function(super_) {\r\n        return {\r\n            finalizeChunks: function(id) {\r\n                if (spec.chunking.success.endpoint) {\r\n                    return sendChunksCompleteRequest(id);\r\n                }\r\n                else {\r\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\r\n                }\r\n            }\r\n        };\r\n    });\r\n};\r\n","/*globals qq*/\r\n/**\r\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\r\n * successfully.\r\n *\r\n * @param o Options from the caller - will override the defaults.\r\n * @constructor\r\n */\r\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\r\n    \"use strict\";\r\n\r\n    var requester,\r\n        method = \"POST\",\r\n        options = {\r\n            cors: {\r\n                allowXdr: false,\r\n                expected: false,\r\n                sendCredentials: false\r\n            },\r\n            endpoint: null,\r\n            log: function(str, level) {}\r\n        },\r\n        promises = {},\r\n        endpointHandler = {\r\n            get: function(id) {\r\n                return options.endpoint;\r\n            }\r\n        };\r\n\r\n    qq.extend(options, o);\r\n\r\n    requester = qq.extend(this, new qq.AjaxRequester({\r\n        acceptHeader: \"application/json\",\r\n        validMethods: [method],\r\n        method: method,\r\n        endpointStore: endpointHandler,\r\n        allowXRequestedWithAndCacheControl: false,\r\n        cors: options.cors,\r\n        log: options.log,\r\n        onComplete: function(id, xhr, isError) {\r\n            var promise = promises[id];\r\n\r\n            delete promises[id];\r\n\r\n            if (isError) {\r\n                promise.failure(xhr);\r\n            }\r\n            else {\r\n                promise.success(xhr);\r\n            }\r\n        }\r\n    }));\r\n\r\n    qq.extend(this, {\r\n        complete: function(id, xhr, params, headers) {\r\n            var promise = new qq.Promise();\r\n\r\n            options.log(\"Submitting All Chunks Done request for \" + id);\r\n\r\n            promises[id] = promise;\r\n\r\n            requester.initTransport(id)\r\n                .withParams(params)\r\n                .withHeaders(headers)\r\n                .send(xhr);\r\n\r\n            return promise;\r\n        }\r\n    });\r\n};\r\n"]}